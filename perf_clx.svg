<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="310.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="293" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="293" > </text>
<g id="frames">
<g >
<title>__wake_up_common (243,922,574 samples, 0.77%)</title><rect x="342.3" y="85" width="9.1" height="15.0" fill="rgb(220,201,33)" rx="2" ry="2" />
<text  x="345.31" y="95.5" ></text>
</g>
<g >
<title>copy_page_to_iter (117,722,467 samples, 0.37%)</title><rect x="941.7" y="101" width="4.4" height="15.0" fill="rgb(237,223,38)" rx="2" ry="2" />
<text  x="944.69" y="111.5" ></text>
</g>
<g >
<title>security_file_permission (555,638,536 samples, 1.75%)</title><rect x="1125.9" y="133" width="20.6" height="15.0" fill="rgb(233,192,12)" rx="2" ry="2" />
<text  x="1128.94" y="143.5" ></text>
</g>
<g >
<title>iov_iter_init (73,177,312 samples, 0.23%)</title><rect x="259.7" y="117" width="2.7" height="15.0" fill="rgb(207,151,17)" rx="2" ry="2" />
<text  x="262.65" y="127.5" ></text>
</g>
<g >
<title>taskset (3,177,514 samples, 0.01%)</title><rect x="1189.9" y="245" width="0.1" height="15.0" fill="rgb(224,177,48)" rx="2" ry="2" />
<text  x="1192.88" y="255.5" ></text>
</g>
<g >
<title>__x64_sys_read (56,471,275 samples, 0.18%)</title><rect x="786.9" y="165" width="2.1" height="15.0" fill="rgb(211,88,50)" rx="2" ry="2" />
<text  x="789.91" y="175.5" ></text>
</g>
<g >
<title>__fdget_pos (837,566,102 samples, 2.63%)</title><rect x="169.1" y="149" width="31.0" height="15.0" fill="rgb(216,224,23)" rx="2" ry="2" />
<text  x="172.07" y="159.5" >__..</text>
</g>
<g >
<title>syscall_exit_to_user_mode (381,795,132 samples, 1.20%)</title><rect x="1164.6" y="181" width="14.2" height="15.0" fill="rgb(231,190,0)" rx="2" ry="2" />
<text  x="1167.60" y="191.5" ></text>
</g>
<g >
<title>write@plt (19,886,416 samples, 0.06%)</title><rect x="1189.1" y="213" width="0.8" height="15.0" fill="rgb(218,24,44)" rx="2" ry="2" />
<text  x="1192.12" y="223.5" ></text>
</g>
<g >
<title>fsnotify (331,334,462 samples, 1.04%)</title><rect x="1134.3" y="117" width="12.2" height="15.0" fill="rgb(211,154,28)" rx="2" ry="2" />
<text  x="1137.26" y="127.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (246,573,269 samples, 0.77%)</title><rect x="612.3" y="165" width="9.1" height="15.0" fill="rgb(234,86,49)" rx="2" ry="2" />
<text  x="615.28" y="175.5" ></text>
</g>
<g >
<title>__fget_light (664,976,221 samples, 2.09%)</title><rect x="802.8" y="133" width="24.7" height="15.0" fill="rgb(209,157,49)" rx="2" ry="2" />
<text  x="805.84" y="143.5" >_..</text>
</g>
<g >
<title>copy_user_enhanced_fast_string (2,009,365,749 samples, 6.31%)</title><rect x="968.2" y="85" width="74.5" height="15.0" fill="rgb(249,128,50)" rx="2" ry="2" />
<text  x="971.21" y="95.5" >copy_use..</text>
</g>
<g >
<title>pipe_read (6,520,616,767 samples, 20.49%)</title><rect x="881.8" y="117" width="241.8" height="15.0" fill="rgb(211,96,3)" rx="2" ry="2" />
<text  x="884.80" y="127.5" >pipe_read</text>
</g>
<g >
<title>copy_page_to_iter_iovec (2,606,722,017 samples, 8.19%)</title><rect x="946.1" y="101" width="96.6" height="15.0" fill="rgb(218,31,32)" rx="2" ry="2" />
<text  x="949.06" y="111.5" >copy_page_t..</text>
</g>
<g >
<title>ksys_write (11,538,535,029 samples, 36.26%)</title><rect x="161.8" y="165" width="427.9" height="15.0" fill="rgb(241,61,51)" rx="2" ry="2" />
<text  x="164.79" y="175.5" >ksys_write</text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (3,181,656 samples, 0.01%)</title><rect x="941.6" y="101" width="0.1" height="15.0" fill="rgb(236,192,27)" rx="2" ry="2" />
<text  x="944.58" y="111.5" ></text>
</g>
<g >
<title>rw_verify_area (81,926,842 samples, 0.26%)</title><rect x="582.9" y="133" width="3.0" height="15.0" fill="rgb(245,229,7)" rx="2" ry="2" />
<text  x="585.88" y="143.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (493,147,190 samples, 1.55%)</title><rect x="608.2" y="181" width="18.3" height="15.0" fill="rgb(235,151,2)" rx="2" ry="2" />
<text  x="611.18" y="191.5" ></text>
</g>
<g >
<title>asm_call_irq_on_stack (3,181,656 samples, 0.01%)</title><rect x="941.6" y="69" width="0.1" height="15.0" fill="rgb(235,207,0)" rx="2" ry="2" />
<text  x="944.58" y="79.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irq (482,807,092 samples, 1.52%)</title><rect x="916.6" y="101" width="17.9" height="15.0" fill="rgb(222,167,4)" rx="2" ry="2" />
<text  x="919.59" y="111.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (1,934,463,314 samples, 6.08%)</title><rect x="440.5" y="85" width="71.8" height="15.0" fill="rgb(216,12,47)" rx="2" ry="2" />
<text  x="443.52" y="95.5" >copy_use..</text>
</g>
<g >
<title>syscall_enter_from_user_mode (486,792,826 samples, 1.53%)</title><rect x="1146.5" y="165" width="18.1" height="15.0" fill="rgb(254,124,47)" rx="2" ry="2" />
<text  x="1149.55" y="175.5" ></text>
</g>
<g >
<title>copy_page_from_iter (127,264,642 samples, 0.40%)</title><rect x="411.3" y="101" width="4.7" height="15.0" fill="rgb(246,149,9)" rx="2" ry="2" />
<text  x="414.29" y="111.5" ></text>
</g>
<g >
<title>anon_pipe_buf_release (190,988,684 samples, 0.60%)</title><rect x="934.5" y="101" width="7.1" height="15.0" fill="rgb(245,55,38)" rx="2" ry="2" />
<text  x="937.49" y="111.5" ></text>
</g>
<g >
<title>kill_fasync (56,477,535 samples, 0.18%)</title><rect x="1042.7" y="101" width="2.1" height="15.0" fill="rgb(206,216,52)" rx="2" ry="2" />
<text  x="1045.73" y="111.5" ></text>
</g>
<g >
<title>ktime_get_coarse_real_ts64 (101,925,574 samples, 0.32%)</title><rect x="1119.8" y="53" width="3.8" height="15.0" fill="rgb(226,70,23)" rx="2" ry="2" />
<text  x="1122.83" y="63.5" ></text>
</g>
<g >
<title>new_sync_read (7,029,692,691 samples, 22.09%)</title><rect x="862.9" y="133" width="260.7" height="15.0" fill="rgb(247,72,0)" rx="2" ry="2" />
<text  x="865.93" y="143.5" >new_sync_read</text>
</g>
<g >
<title>kill_fasync (85,110,703 samples, 0.27%)</title><rect x="534.5" y="101" width="3.2" height="15.0" fill="rgb(253,213,10)" rx="2" ry="2" />
<text  x="537.50" y="111.5" ></text>
</g>
<g >
<title>copy_page_from_iter_iovec (2,595,470,007 samples, 8.16%)</title><rect x="416.0" y="101" width="96.3" height="15.0" fill="rgb(236,184,3)" rx="2" ry="2" />
<text  x="419.01" y="111.5" >copy_page_f..</text>
</g>
<g >
<title>syscall_exit_to_user_mode_prepare (79,543,342 samples, 0.25%)</title><rect x="1175.8" y="165" width="3.0" height="15.0" fill="rgb(225,15,8)" rx="2" ry="2" />
<text  x="1178.81" y="175.5" ></text>
</g>
<g >
<title>vfs_write (10,504,911,779 samples, 33.01%)</title><rect x="200.1" y="149" width="389.6" height="15.0" fill="rgb(248,16,22)" rx="2" ry="2" />
<text  x="203.13" y="159.5" >vfs_write</text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (3,181,656 samples, 0.01%)</title><rect x="941.6" y="53" width="0.1" height="15.0" fill="rgb(231,219,13)" rx="2" ry="2" />
<text  x="944.58" y="63.5" ></text>
</g>
<g >
<title>read (14,735,325,867 samples, 46.31%)</title><rect x="642.5" y="213" width="546.4" height="15.0" fill="rgb(209,42,15)" rx="2" ry="2" />
<text  x="645.47" y="223.5" >read</text>
</g>
<g >
<title>new_sync_write (9,146,277,250 samples, 28.74%)</title><rect x="243.7" y="133" width="339.2" height="15.0" fill="rgb(249,187,13)" rx="2" ry="2" />
<text  x="246.70" y="143.5" >new_sync_write</text>
</g>
<g >
<title>entry_SYSCALL_64 (15,250,713,729 samples, 47.93%)</title><rect x="60.9" y="197" width="565.6" height="15.0" fill="rgb(233,209,22)" rx="2" ry="2" />
<text  x="63.92" y="207.5" >entry_SYSCALL_64</text>
</g>
<g >
<title>vfs_read (8,603,521,821 samples, 27.04%)</title><rect x="827.5" y="149" width="319.0" height="15.0" fill="rgb(226,225,15)" rx="2" ry="2" />
<text  x="830.50" y="159.5" >vfs_read</text>
</g>
<g >
<title>syscall_return_via_sysret (273,671,322 samples, 0.86%)</title><rect x="1178.8" y="197" width="10.1" height="15.0" fill="rgb(246,43,46)" rx="2" ry="2" />
<text  x="1181.76" y="207.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (244,180,463 samples, 0.77%)</title><rect x="382.6" y="85" width="9.0" height="15.0" fill="rgb(222,51,38)" rx="2" ry="2" />
<text  x="385.56" y="95.5" ></text>
</g>
<g >
<title>ksys_read (9,641,558,678 samples, 30.30%)</title><rect x="789.0" y="165" width="357.5" height="15.0" fill="rgb(239,65,21)" rx="2" ry="2" />
<text  x="792.00" y="175.5" >ksys_read</text>
</g>
<g >
<title>syscall_exit_to_user_mode_prepare (136,015,691 samples, 0.43%)</title><rect x="621.4" y="165" width="5.1" height="15.0" fill="rgb(249,24,12)" rx="2" ry="2" />
<text  x="624.43" y="175.5" ></text>
</g>
<g >
<title>current_time (346,133,047 samples, 1.09%)</title><rect x="1110.8" y="69" width="12.8" height="15.0" fill="rgb(231,36,37)" rx="2" ry="2" />
<text  x="1113.78" y="79.5" ></text>
</g>
<g >
<title>mutex_lock (779,542,300 samples, 2.45%)</title><rect x="1044.8" y="101" width="28.9" height="15.0" fill="rgb(221,225,2)" rx="2" ry="2" />
<text  x="1047.82" y="111.5" >mu..</text>
</g>
<g >
<title>__fget_light (688,024,142 samples, 2.16%)</title><rect x="174.6" y="133" width="25.5" height="15.0" fill="rgb(250,204,12)" rx="2" ry="2" />
<text  x="177.61" y="143.5" >_..</text>
</g>
<g >
<title>ktime_get_coarse_real_ts64 (120,106,594 samples, 0.38%)</title><rect x="530.0" y="69" width="4.5" height="15.0" fill="rgb(220,167,2)" rx="2" ry="2" />
<text  x="533.02" y="79.5" ></text>
</g>
<g >
<title>do_syscall_64 (12,226,561,149 samples, 38.42%)</title><rect x="154.8" y="181" width="453.4" height="15.0" fill="rgb(218,58,5)" rx="2" ry="2" />
<text  x="157.77" y="191.5" >do_syscall_64</text>
</g>
<g >
<title>mutex_unlock (516,216,459 samples, 1.62%)</title><rect x="1073.7" y="101" width="19.2" height="15.0" fill="rgb(236,103,2)" rx="2" ry="2" />
<text  x="1076.73" y="111.5" ></text>
</g>
<g >
<title>__x64_sys_write (45,339,547 samples, 0.14%)</title><rect x="160.1" y="165" width="1.7" height="15.0" fill="rgb(240,210,5)" rx="2" ry="2" />
<text  x="163.11" y="175.5" ></text>
</g>
<g >
<title>main (163,855,065 samples, 0.51%)</title><rect x="636.4" y="213" width="6.1" height="15.0" fill="rgb(220,116,13)" rx="2" ry="2" />
<text  x="639.39" y="223.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (13,043,685,121 samples, 40.99%)</title><rect x="695.0" y="197" width="483.8" height="15.0" fill="rgb(217,49,48)" rx="2" ry="2" />
<text  x="698.05" y="207.5" >entry_SYSCALL_64</text>
</g>
<g >
<title>mutex_unlock (529,749,830 samples, 1.66%)</title><rect x="563.2" y="101" width="19.7" height="15.0" fill="rgb(254,129,41)" rx="2" ry="2" />
<text  x="566.23" y="111.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (265,693,822 samples, 0.83%)</title><rect x="626.5" y="197" width="9.8" height="15.0" fill="rgb(211,91,2)" rx="2" ry="2" />
<text  x="629.47" y="207.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (3,181,656 samples, 0.01%)</title><rect x="941.6" y="85" width="0.1" height="15.0" fill="rgb(244,165,32)" rx="2" ry="2" />
<text  x="944.58" y="95.5" ></text>
</g>
<g >
<title>fsnotify (323,631,349 samples, 1.02%)</title><rect x="850.9" y="133" width="12.0" height="15.0" fill="rgb(232,36,32)" rx="2" ry="2" />
<text  x="853.92" y="143.5" ></text>
</g>
<g >
<title>__fdget_pos (812,137,926 samples, 2.55%)</title><rect x="797.4" y="149" width="30.1" height="15.0" fill="rgb(249,125,50)" rx="2" ry="2" />
<text  x="800.38" y="159.5" >__..</text>
</g>
<g >
<title>__wake_up_sync_key (49,316,086 samples, 0.15%)</title><rect x="391.6" y="101" width="1.9" height="15.0" fill="rgb(214,25,4)" rx="2" ry="2" />
<text  x="394.64" y="111.5" ></text>
</g>
<g >
<title>do_syscall_64 (10,304,928,743 samples, 32.39%)</title><rect x="782.5" y="181" width="382.1" height="15.0" fill="rgb(220,154,18)" rx="2" ry="2" />
<text  x="785.45" y="191.5" >do_syscall_64</text>
</g>
<g >
<title>fsnotify (293,498,618 samples, 0.92%)</title><rect x="232.8" y="133" width="10.9" height="15.0" fill="rgb(228,116,7)" rx="2" ry="2" />
<text  x="235.81" y="143.5" ></text>
</g>
<g >
<title>file_update_time (599,747,487 samples, 1.88%)</title><rect x="512.3" y="101" width="22.2" height="15.0" fill="rgb(229,93,8)" rx="2" ry="2" />
<text  x="515.26" y="111.5" >f..</text>
</g>
<g >
<title>all (31,819,740,770 samples, 100%)</title><rect x="10.0" y="261" width="1180.0" height="15.0" fill="rgb(229,82,43)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>read@plt (5,569,343 samples, 0.02%)</title><rect x="1188.9" y="213" width="0.2" height="15.0" fill="rgb(253,37,15)" rx="2" ry="2" />
<text  x="1191.91" y="223.5" ></text>
</g>
<g >
<title>touch_atime (828,960,953 samples, 2.61%)</title><rect x="1092.9" y="101" width="30.7" height="15.0" fill="rgb(219,104,25)" rx="2" ry="2" />
<text  x="1095.87" y="111.5" >to..</text>
</g>
<g >
<title>syscall_enter_from_user_mode (498,718,359 samples, 1.57%)</title><rect x="589.7" y="165" width="18.5" height="15.0" fill="rgb(229,216,27)" rx="2" ry="2" />
<text  x="592.69" y="175.5" ></text>
</g>
<g >
<title>current_time (321,346,590 samples, 1.01%)</title><rect x="522.6" y="85" width="11.9" height="15.0" fill="rgb(230,117,35)" rx="2" ry="2" />
<text  x="525.55" y="95.5" ></text>
</g>
<g >
<title>security_file_permission (101,810,173 samples, 0.32%)</title><rect x="585.9" y="133" width="3.8" height="15.0" fill="rgb(224,25,50)" rx="2" ry="2" />
<text  x="588.91" y="143.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (3,181,656 samples, 0.01%)</title><rect x="941.6" y="37" width="0.1" height="15.0" fill="rgb(205,108,34)" rx="2" ry="2" />
<text  x="944.58" y="47.5" ></text>
</g>
<g >
<title>mutex_lock (689,606,116 samples, 2.17%)</title><rect x="537.7" y="101" width="25.5" height="15.0" fill="rgb(207,159,33)" rx="2" ry="2" />
<text  x="540.66" y="111.5" >m..</text>
</g>
<g >
<title>rw_verify_area (62,841,767 samples, 0.20%)</title><rect x="1123.6" y="133" width="2.3" height="15.0" fill="rgb(240,215,48)" rx="2" ry="2" />
<text  x="1126.61" y="143.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irq (479,650,831 samples, 1.51%)</title><rect x="393.5" y="101" width="17.8" height="15.0" fill="rgb(225,40,4)" rx="2" ry="2" />
<text  x="396.47" y="111.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (1,837,127,713 samples, 5.77%)</title><rect x="323.5" y="101" width="68.1" height="15.0" fill="rgb(207,116,7)" rx="2" ry="2" />
<text  x="326.52" y="111.5" >__wake_..</text>
</g>
<g >
<title>atime_needs_update (668,263,994 samples, 2.10%)</title><rect x="1098.8" y="85" width="24.8" height="15.0" fill="rgb(233,102,14)" rx="2" ry="2" />
<text  x="1101.83" y="95.5" >a..</text>
</g>
<g >
<title>_raw_spin_lock_irqsave (841,550,457 samples, 2.64%)</title><rect x="351.4" y="85" width="31.2" height="15.0" fill="rgb(241,17,14)" rx="2" ry="2" />
<text  x="354.35" y="95.5" >_r..</text>
</g>
<g >
<title>pipe_write (8,642,769,421 samples, 27.16%)</title><rect x="262.4" y="117" width="320.5" height="15.0" fill="rgb(213,68,1)" rx="2" ry="2" />
<text  x="265.37" y="127.5" >pipe_write</text>
</g>
<g >
<title>exit_to_user_mode_prepare (198,848,871 samples, 0.62%)</title><rect x="1168.4" y="165" width="7.4" height="15.0" fill="rgb(219,94,28)" rx="2" ry="2" />
<text  x="1171.44" y="175.5" ></text>
</g>
<g >
<title>__GI___libc_write (16,889,269,135 samples, 53.08%)</title><rect x="10.0" y="213" width="626.3" height="15.0" fill="rgb(210,164,13)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >__GI___libc_write</text>
</g>
<g >
<title>[unknown] (31,815,657,677 samples, 99.99%)</title><rect x="10.0" y="229" width="1179.9" height="15.0" fill="rgb(215,89,19)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >[unknown]</text>
</g>
<g >
<title>iov_iter_init (55,676,992 samples, 0.17%)</title><rect x="879.7" y="117" width="2.1" height="15.0" fill="rgb(208,8,15)" rx="2" ry="2" />
<text  x="882.74" y="127.5" ></text>
</g>
<g >
<title>pipe (31,816,453,164 samples, 99.99%)</title><rect x="10.0" y="245" width="1179.9" height="15.0" fill="rgb(249,75,10)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >pipe</text>
</g>
</g>
</svg>
