<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="294.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="277" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="277" > </text>
<g id="frames">
<g >
<title>kill_fasync (19,250,000 samples, 0.19%)</title><rect x="512.1" y="85" width="2.2" height="15.0" fill="rgb(225,122,38)" rx="2" ry="2" />
<text  x="515.05" y="95.5" ></text>
</g>
<g >
<title>ksys_write (3,265,000,000 samples, 32.65%)</title><rect x="147.0" y="149" width="385.3" height="15.0" fill="rgb(205,207,31)" rx="2" ry="2" />
<text  x="150.02" y="159.5" >ksys_write</text>
</g>
<g >
<title>Filter_vfs_write_stub (382,250,000 samples, 3.82%)</title><rect x="94.8" y="181" width="45.1" height="15.0" fill="rgb(252,123,22)" rx="2" ry="2" />
<text  x="97.84" y="191.5" >Filt..</text>
</g>
<g >
<title>atime_needs_update (114,250,000 samples, 1.14%)</title><rect x="1060.7" y="69" width="13.5" height="15.0" fill="rgb(208,183,2)" rx="2" ry="2" />
<text  x="1063.71" y="79.5" ></text>
</g>
<g >
<title>read (4,350,250,000 samples, 43.50%)</title><rect x="674.6" y="197" width="513.3" height="15.0" fill="rgb(230,160,22)" rx="2" ry="2" />
<text  x="677.64" y="207.5" >read</text>
</g>
<g >
<title>mutex_lock (71,000,000 samples, 0.71%)</title><rect x="1031.7" y="85" width="8.3" height="15.0" fill="rgb(220,74,18)" rx="2" ry="2" />
<text  x="1034.66" y="95.5" ></text>
</g>
<g >
<title>pipe (10,000,250,000 samples, 100.00%)</title><rect x="10.0" y="229" width="1179.9" height="15.0" fill="rgb(209,3,15)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >pipe</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (273,000,000 samples, 2.73%)</title><rect x="347.9" y="69" width="32.2" height="15.0" fill="rgb(249,115,3)" rx="2" ry="2" />
<text  x="350.93" y="79.5" >_r..</text>
</g>
<g >
<title>__x64_sys_write (9,250,000 samples, 0.09%)</title><rect x="145.9" y="149" width="1.1" height="15.0" fill="rgb(245,161,2)" rx="2" ry="2" />
<text  x="148.93" y="159.5" ></text>
</g>
<g >
<title>fsnotify (67,250,000 samples, 0.67%)</title><rect x="802.6" y="117" width="8.0" height="15.0" fill="rgb(232,199,50)" rx="2" ry="2" />
<text  x="805.64" y="127.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (364,750,000 samples, 3.65%)</title><rect x="337.1" y="85" width="43.0" height="15.0" fill="rgb(246,130,12)" rx="2" ry="2" />
<text  x="340.10" y="95.5" >__wa..</text>
</g>
<g >
<title>__GI___libc_write (5,356,500,000 samples, 53.56%)</title><rect x="10.0" y="197" width="632.0" height="15.0" fill="rgb(229,185,53)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >__GI___libc_write</text>
</g>
<g >
<title>__fget_light (242,000,000 samples, 2.42%)</title><rect x="751.6" y="117" width="28.5" height="15.0" fill="rgb(241,121,49)" rx="2" ry="2" />
<text  x="754.57" y="127.5" >__..</text>
</g>
<g >
<title>syscall_exit_to_user_mode_prepare (103,500,000 samples, 1.03%)</title><rect x="1175.7" y="149" width="12.2" height="15.0" fill="rgb(228,117,9)" rx="2" ry="2" />
<text  x="1178.72" y="159.5" ></text>
</g>
<g >
<title>security_file_permission (108,750,000 samples, 1.09%)</title><rect x="1075.1" y="117" width="12.9" height="15.0" fill="rgb(206,21,33)" rx="2" ry="2" />
<text  x="1078.14" y="127.5" ></text>
</g>
<g >
<title>security_file_permission (35,750,000 samples, 0.36%)</title><rect x="528.0" y="117" width="4.3" height="15.0" fill="rgb(238,181,8)" rx="2" ry="2" />
<text  x="531.04" y="127.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (741,250,000 samples, 7.41%)</title><rect x="1088.0" y="149" width="87.4" height="15.0" fill="rgb(212,154,53)" rx="2" ry="2" />
<text  x="1090.97" y="159.5" >syscall_en..</text>
</g>
<g >
<title>new_sync_write (2,507,250,000 samples, 25.07%)</title><rect x="230.8" y="117" width="295.8" height="15.0" fill="rgb(225,154,41)" rx="2" ry="2" />
<text  x="233.76" y="127.5" >new_sync_write</text>
</g>
<g >
<title>mutex_unlock (119,000,000 samples, 1.19%)</title><rect x="1040.0" y="85" width="14.1" height="15.0" fill="rgb(232,213,30)" rx="2" ry="2" />
<text  x="1043.03" y="95.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_rax (8,500,000 samples, 0.08%)</title><rect x="139.9" y="165" width="1.0" height="15.0" fill="rgb(219,15,10)" rx="2" ry="2" />
<text  x="142.94" y="175.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (46,000,000 samples, 0.46%)</title><rect x="342.5" y="69" width="5.4" height="15.0" fill="rgb(224,187,27)" rx="2" ry="2" />
<text  x="345.50" y="79.5" ></text>
</g>
<g >
<title>vfs_write (2,967,500,000 samples, 29.67%)</title><rect x="182.1" y="133" width="350.2" height="15.0" fill="rgb(234,134,5)" rx="2" ry="2" />
<text  x="185.12" y="143.5" >vfs_write</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3,795,500,000 samples, 37.95%)</title><rect x="740.1" y="181" width="447.8" height="15.0" fill="rgb(213,135,49)" rx="2" ry="2" />
<text  x="743.10" y="191.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>Check_vfs_write (106,500,000 samples, 1.06%)</title><rect x="124.7" y="165" width="12.6" height="15.0" fill="rgb(253,21,34)" rx="2" ry="2" />
<text  x="127.72" y="175.5" ></text>
</g>
<g >
<title>__fdget_pos (271,000,000 samples, 2.71%)</title><rect x="748.2" y="133" width="31.9" height="15.0" fill="rgb(244,225,54)" rx="2" ry="2" />
<text  x="751.15" y="143.5" >__..</text>
</g>
<g >
<title>file_update_time (91,750,000 samples, 0.92%)</title><rect x="501.2" y="85" width="10.9" height="15.0" fill="rgb(233,193,30)" rx="2" ry="2" />
<text  x="504.23" y="95.5" ></text>
</g>
<g >
<title>ktime_get_coarse_real_ts64 (8,500,000 samples, 0.08%)</title><rect x="511.0" y="53" width="1.1" height="15.0" fill="rgb(237,3,54)" rx="2" ry="2" />
<text  x="514.05" y="63.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (843,750,000 samples, 8.44%)</title><rect x="401.7" y="69" width="99.5" height="15.0" fill="rgb(230,43,9)" rx="2" ry="2" />
<text  x="404.67" y="79.5" >copy_user_en..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4,118,750,000 samples, 41.18%)</title><rect x="142.0" y="181" width="486.0" height="15.0" fill="rgb(205,79,42)" rx="2" ry="2" />
<text  x="145.00" y="191.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>touch_atime (170,500,000 samples, 1.70%)</title><rect x="1054.1" y="85" width="20.1" height="15.0" fill="rgb(212,62,9)" rx="2" ry="2" />
<text  x="1057.07" y="95.5" ></text>
</g>
<g >
<title>anon_pipe_buf_release (226,750,000 samples, 2.27%)</title><rect x="883.3" y="85" width="26.7" height="15.0" fill="rgb(237,68,35)" rx="2" ry="2" />
<text  x="886.28" y="95.5" >a..</text>
</g>
<g >
<title>__x64_sys_read (9,750,000 samples, 0.10%)</title><rect x="743.2" y="149" width="1.2" height="15.0" fill="rgb(232,176,24)" rx="2" ry="2" />
<text  x="746.23" y="159.5" ></text>
</g>
<g >
<title>do_syscall_64 (3,689,500,000 samples, 36.89%)</title><rect x="740.1" y="165" width="435.3" height="15.0" fill="rgb(219,202,48)" rx="2" ry="2" />
<text  x="743.10" y="175.5" >do_syscall_64</text>
</g>
<g >
<title>copy_page_from_iter (44,750,000 samples, 0.45%)</title><rect x="382.0" y="85" width="5.3" height="15.0" fill="rgb(246,76,15)" rx="2" ry="2" />
<text  x="385.03" y="95.5" ></text>
</g>
<g >
<title>iov_iter_init (10,250,000 samples, 0.10%)</title><rect x="823.5" y="101" width="1.2" height="15.0" fill="rgb(212,92,37)" rx="2" ry="2" />
<text  x="826.49" y="111.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (897,500,000 samples, 8.97%)</title><rect x="924.6" y="69" width="105.9" height="15.0" fill="rgb(223,75,45)" rx="2" ry="2" />
<text  x="927.61" y="79.5" >copy_user_en..</text>
</g>
<g >
<title>rw_verify_area (8,000,000 samples, 0.08%)</title><rect x="1074.2" y="117" width="0.9" height="15.0" fill="rgb(229,12,48)" rx="2" ry="2" />
<text  x="1077.19" y="127.5" ></text>
</g>
<g >
<title>all (10,000,750,000 samples, 100%)</title><rect x="10.0" y="245" width="1180.0" height="15.0" fill="rgb(210,96,2)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>ftrace_ops_assist_func (197,000,000 samples, 1.97%)</title><rect x="207.5" y="101" width="23.3" height="15.0" fill="rgb(224,172,27)" rx="2" ry="2" />
<text  x="210.52" y="111.5" >f..</text>
</g>
<g >
<title>read@plt (16,250,000 samples, 0.16%)</title><rect x="1187.9" y="197" width="2.0" height="15.0" fill="rgb(236,227,32)" rx="2" ry="2" />
<text  x="1190.94" y="207.5" ></text>
</g>
<g >
<title>RunFnMatchTest (8,500,000 samples, 0.08%)</title><rect x="139.9" y="181" width="1.0" height="15.0" fill="rgb(205,105,0)" rx="2" ry="2" />
<text  x="142.94" y="191.5" ></text>
</g>
<g >
<title>copy_page_to_iter_iovec (996,500,000 samples, 9.96%)</title><rect x="912.9" y="85" width="117.6" height="15.0" fill="rgb(246,105,28)" rx="2" ry="2" />
<text  x="915.93" y="95.5" >copy_page_to_i..</text>
</g>
<g >
<title>current_time (45,750,000 samples, 0.46%)</title><rect x="506.7" y="69" width="5.4" height="15.0" fill="rgb(232,107,44)" rx="2" ry="2" />
<text  x="509.65" y="79.5" ></text>
</g>
<g >
<title>iov_iter_init (9,750,000 samples, 0.10%)</title><rect x="249.9" y="101" width="1.1" height="15.0" fill="rgb(214,188,42)" rx="2" ry="2" />
<text  x="252.88" y="111.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irq (7,000,000 samples, 0.07%)</title><rect x="882.5" y="85" width="0.8" height="15.0" fill="rgb(215,59,0)" rx="2" ry="2" />
<text  x="885.46" y="95.5" ></text>
</g>
<g >
<title>mutex_unlock (46,500,000 samples, 0.46%)</title><rect x="521.1" y="85" width="5.5" height="15.0" fill="rgb(227,128,15)" rx="2" ry="2" />
<text  x="524.11" y="95.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (106,000,000 samples, 1.06%)</title><rect x="1175.4" y="165" width="12.5" height="15.0" fill="rgb(208,226,2)" rx="2" ry="2" />
<text  x="1178.43" y="175.5" ></text>
</g>
<g >
<title>pipe_write (2,335,500,000 samples, 23.35%)</title><rect x="251.0" y="101" width="275.6" height="15.0" fill="rgb(215,164,23)" rx="2" ry="2" />
<text  x="254.03" y="111.5" >pipe_write</text>
</g>
<g >
<title>syscall_exit_to_user_mode_prepare (56,500,000 samples, 0.56%)</title><rect x="621.3" y="149" width="6.7" height="15.0" fill="rgb(207,104,53)" rx="2" ry="2" />
<text  x="624.31" y="159.5" ></text>
</g>
<g >
<title>RunFnMatchTest (103,750,000 samples, 1.04%)</title><rect x="218.5" y="85" width="12.3" height="15.0" fill="rgb(221,70,43)" rx="2" ry="2" />
<text  x="221.52" y="95.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_rax (8,750,000 samples, 0.09%)</title><rect x="739.1" y="181" width="1.0" height="15.0" fill="rgb(230,187,29)" rx="2" ry="2" />
<text  x="742.07" y="191.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_rax (8,750,000 samples, 0.09%)</title><rect x="140.9" y="181" width="1.1" height="15.0" fill="rgb(211,195,53)" rx="2" ry="2" />
<text  x="143.94" y="191.5" ></text>
</g>
<g >
<title>kill_fasync (9,750,000 samples, 0.10%)</title><rect x="1030.5" y="85" width="1.2" height="15.0" fill="rgb(207,37,1)" rx="2" ry="2" />
<text  x="1033.51" y="95.5" ></text>
</g>
<g >
<title>rw_verify_area (12,250,000 samples, 0.12%)</title><rect x="526.6" y="117" width="1.4" height="15.0" fill="rgb(247,8,12)" rx="2" ry="2" />
<text  x="529.59" y="127.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (56,750,000 samples, 0.57%)</title><rect x="621.3" y="165" width="6.7" height="15.0" fill="rgb(224,218,52)" rx="2" ry="2" />
<text  x="624.28" y="175.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irq (6,750,000 samples, 0.07%)</title><rect x="381.2" y="85" width="0.8" height="15.0" fill="rgb(218,104,44)" rx="2" ry="2" />
<text  x="384.23" y="95.5" ></text>
</g>
<g >
<title>new_sync_read (2,234,250,000 samples, 22.34%)</title><rect x="810.6" y="117" width="263.6" height="15.0" fill="rgb(230,89,29)" rx="2" ry="2" />
<text  x="813.57" y="127.5" >new_sync_read</text>
</g>
<g >
<title>ftrace_trampoline (22,500,000 samples, 0.22%)</title><rect x="137.3" y="165" width="2.6" height="15.0" fill="rgb(249,101,40)" rx="2" ry="2" />
<text  x="140.28" y="175.5" ></text>
</g>
<g >
<title>copy_page_from_iter_iovec (965,500,000 samples, 9.65%)</title><rect x="387.3" y="85" width="113.9" height="15.0" fill="rgb(245,146,10)" rx="2" ry="2" />
<text  x="390.31" y="95.5" >copy_page_from..</text>
</g>
<g >
<title>ktime_get_coarse_real_ts64 (8,500,000 samples, 0.08%)</title><rect x="1073.2" y="37" width="1.0" height="15.0" fill="rgb(217,160,22)" rx="2" ry="2" />
<text  x="1076.19" y="47.5" ></text>
</g>
<g >
<title>copy_page_to_iter (24,500,000 samples, 0.24%)</title><rect x="910.0" y="85" width="2.9" height="15.0" fill="rgb(219,51,18)" rx="2" ry="2" />
<text  x="913.04" y="95.5" ></text>
</g>
<g >
<title>__fget_light (235,500,000 samples, 2.35%)</title><rect x="154.3" y="117" width="27.8" height="15.0" fill="rgb(232,83,32)" rx="2" ry="2" />
<text  x="157.33" y="127.5" >_..</text>
</g>
<g >
<title>do_syscall_64 (4,062,000,000 samples, 40.62%)</title><rect x="142.0" y="165" width="479.3" height="15.0" fill="rgb(242,64,2)" rx="2" ry="2" />
<text  x="145.00" y="175.5" >do_syscall_64</text>
</g>
<g >
<title>main (276,500,000 samples, 2.76%)</title><rect x="642.0" y="197" width="32.6" height="15.0" fill="rgb(244,212,29)" rx="2" ry="2" />
<text  x="645.02" y="207.5" >main</text>
</g>
<g >
<title>[unknown] (10,000,000,000 samples, 99.99%)</title><rect x="10.0" y="213" width="1179.9" height="15.0" fill="rgb(220,103,49)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >[unknown]</text>
</g>
<g >
<title>pipe_read (2,114,500,000 samples, 21.14%)</title><rect x="824.7" y="101" width="249.5" height="15.0" fill="rgb(217,153,49)" rx="2" ry="2" />
<text  x="827.70" y="111.5" >pipe_read</text>
</g>
<g >
<title>__fdget_pos (272,500,000 samples, 2.72%)</title><rect x="150.0" y="133" width="32.1" height="15.0" fill="rgb(241,154,51)" rx="2" ry="2" />
<text  x="152.97" y="143.5" >__..</text>
</g>
<g >
<title>fsnotify (66,000,000 samples, 0.66%)</title><rect x="1080.2" y="101" width="7.8" height="15.0" fill="rgb(246,33,44)" rx="2" ry="2" />
<text  x="1083.18" y="111.5" ></text>
</g>
<g >
<title>ftrace_trampoline (118,500,000 samples, 1.18%)</title><rect x="628.0" y="181" width="14.0" height="15.0" fill="rgb(231,48,53)" rx="2" ry="2" />
<text  x="630.98" y="191.5" ></text>
</g>
<g >
<title>vfs_read (2,609,000,000 samples, 26.09%)</title><rect x="780.1" y="133" width="307.9" height="15.0" fill="rgb(228,33,51)" rx="2" ry="2" />
<text  x="783.13" y="143.5" >vfs_read</text>
</g>
<g >
<title>current_time (81,250,000 samples, 0.81%)</title><rect x="1064.6" y="53" width="9.6" height="15.0" fill="rgb(242,5,20)" rx="2" ry="2" />
<text  x="1067.60" y="63.5" ></text>
</g>
<g >
<title>fsnotify (59,250,000 samples, 0.59%)</title><rect x="192.6" y="117" width="7.0" height="15.0" fill="rgb(212,16,21)" rx="2" ry="2" />
<text  x="195.59" y="127.5" ></text>
</g>
<g >
<title>ksys_read (2,912,000,000 samples, 29.12%)</title><rect x="744.4" y="149" width="343.6" height="15.0" fill="rgb(247,135,54)" rx="2" ry="2" />
<text  x="747.38" y="159.5" >ksys_read</text>
</g>
<g >
<title>syscall_enter_from_user_mode (754,500,000 samples, 7.54%)</title><rect x="532.3" y="149" width="89.0" height="15.0" fill="rgb(254,97,34)" rx="2" ry="2" />
<text  x="535.26" y="159.5" >syscall_en..</text>
</g>
<g >
<title>mutex_lock (57,500,000 samples, 0.57%)</title><rect x="514.3" y="85" width="6.8" height="15.0" fill="rgb(215,52,30)" rx="2" ry="2" />
<text  x="517.32" y="95.5" ></text>
</g>
<g >
<title>__wake_up_sync_key (9,250,000 samples, 0.09%)</title><rect x="380.1" y="85" width="1.1" height="15.0" fill="rgb(245,161,36)" rx="2" ry="2" />
<text  x="383.14" y="95.5" ></text>
</g>
<g >
<title>ftrace_trampoline (264,250,000 samples, 2.64%)</title><rect x="199.6" y="117" width="31.2" height="15.0" fill="rgb(218,194,21)" rx="2" ry="2" />
<text  x="202.58" y="127.5" >ft..</text>
</g>
</g>
</svg>
