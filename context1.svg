<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="294.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="277" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="277" > </text>
<g id="frames">
<g >
<title>init_wait_entry (9,750,000 samples, 0.10%)</title><rect x="671.7" y="85" width="1.2" height="15.0" fill="rgb(251,68,23)" rx="2" ry="2" />
<text  x="674.72" y="95.5" ></text>
</g>
<g >
<title>prepare_to_wait_event (237,500,000 samples, 2.37%)</title><rect x="683.3" y="85" width="28.0" height="15.0" fill="rgb(252,86,13)" rx="2" ry="2" />
<text  x="686.26" y="95.5" >p..</text>
</g>
<g >
<title>copy_user_enhanced_fast_string (58,500,000 samples, 0.58%)</title><rect x="320.6" y="69" width="6.9" height="15.0" fill="rgb(250,70,44)" rx="2" ry="2" />
<text  x="323.55" y="79.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_rax (1,000,000 samples, 0.01%)</title><rect x="546.0" y="165" width="0.2" height="15.0" fill="rgb(234,163,51)" rx="2" ry="2" />
<text  x="549.03" y="175.5" ></text>
</g>
<g >
<title>mutex_unlock (12,000,000 samples, 0.12%)</title><rect x="342.6" y="85" width="1.4" height="15.0" fill="rgb(235,72,31)" rx="2" ry="2" />
<text  x="345.59" y="95.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (58,000,000 samples, 0.58%)</title><rect x="649.5" y="69" width="6.9" height="15.0" fill="rgb(205,205,45)" rx="2" ry="2" />
<text  x="652.51" y="79.5" ></text>
</g>
<g >
<title>ftrace_trampoline (29,750,000 samples, 0.30%)</title><rect x="50.9" y="165" width="3.6" height="15.0" fill="rgb(237,22,43)" rx="2" ry="2" />
<text  x="53.94" y="175.5" ></text>
</g>
<g >
<title>[unknown] (10,000,000,000 samples, 99.99%)</title><rect x="10.0" y="213" width="1179.9" height="15.0" fill="rgb(233,220,9)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >[unknown]</text>
</g>
<g >
<title>ktime_get_coarse_real_ts64 (8,500,000 samples, 0.08%)</title><rect x="338.5" y="53" width="1.0" height="15.0" fill="rgb(237,83,35)" rx="2" ry="2" />
<text  x="341.46" y="63.5" ></text>
</g>
<g >
<title>__schedule (3,611,250,000 samples, 36.11%)</title><rect x="719.2" y="69" width="426.1" height="15.0" fill="rgb(210,54,16)" rx="2" ry="2" />
<text  x="722.19" y="79.5" >__schedule</text>
</g>
<g >
<title>security_file_permission (39,000,000 samples, 0.39%)</title><rect x="1154.4" y="117" width="4.6" height="15.0" fill="rgb(247,126,34)" rx="2" ry="2" />
<text  x="1157.43" y="127.5" ></text>
</g>
<g >
<title>context1 (10,000,250,000 samples, 100.00%)</title><rect x="10.0" y="229" width="1179.9" height="15.0" fill="rgb(254,56,16)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >context1</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (63,250,000 samples, 0.63%)</title><rect x="630.2" y="85" width="7.5" height="15.0" fill="rgb(207,137,41)" rx="2" ry="2" />
<text  x="633.19" y="95.5" ></text>
</g>
<g >
<title>vfs_read (5,015,000,000 samples, 50.15%)</title><rect x="567.3" y="133" width="591.7" height="15.0" fill="rgb(253,53,54)" rx="2" ry="2" />
<text  x="570.30" y="143.5" >vfs_read</text>
</g>
<g >
<title>copy_user_generic_unrolled (71,000,000 samples, 0.71%)</title><rect x="327.5" y="69" width="8.3" height="15.0" fill="rgb(244,141,15)" rx="2" ry="2" />
<text  x="330.46" y="79.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,526,000,000 samples, 15.26%)</title><rect x="135.2" y="69" width="180.0" height="15.0" fill="rgb(242,52,26)" rx="2" ry="2" />
<text  x="138.16" y="79.5" >_raw_spin_unlock_irqres..</text>
</g>
<g >
<title>syscall_enter_from_user_mode (204,000,000 samples, 2.04%)</title><rect x="1159.0" y="149" width="24.1" height="15.0" fill="rgb(216,98,45)" rx="2" ry="2" />
<text  x="1162.03" y="159.5" >s..</text>
</g>
<g >
<title>__x64_sys_write (7,500,000 samples, 0.07%)</title><rect x="57.0" y="149" width="0.9" height="15.0" fill="rgb(219,200,38)" rx="2" ry="2" />
<text  x="60.05" y="159.5" ></text>
</g>
<g >
<title>rw_verify_area (2,500,000 samples, 0.02%)</title><rect x="1154.1" y="117" width="0.3" height="15.0" fill="rgb(218,19,14)" rx="2" ry="2" />
<text  x="1157.13" y="127.5" ></text>
</g>
<g >
<title>security_file_permission (7,500,000 samples, 0.07%)</title><rect x="344.4" y="117" width="0.9" height="15.0" fill="rgb(243,27,19)" rx="2" ry="2" />
<text  x="347.45" y="127.5" ></text>
</g>
<g >
<title>copy_page_from_iter_iovec (166,750,000 samples, 1.67%)</title><rect x="316.2" y="85" width="19.6" height="15.0" fill="rgb(249,215,17)" rx="2" ry="2" />
<text  x="319.16" y="95.5" ></text>
</g>
<g >
<title>anon_pipe_buf_release (64,750,000 samples, 0.65%)</title><rect x="637.7" y="85" width="7.6" height="15.0" fill="rgb(232,171,9)" rx="2" ry="2" />
<text  x="640.65" y="95.5" ></text>
</g>
<g >
<title>current_time (19,000,000 samples, 0.19%)</title><rect x="337.2" y="69" width="2.3" height="15.0" fill="rgb(240,92,27)" rx="2" ry="2" />
<text  x="340.22" y="79.5" ></text>
</g>
<g >
<title>schedule (3,678,250,000 samples, 36.78%)</title><rect x="711.3" y="85" width="434.0" height="15.0" fill="rgb(212,28,3)" rx="2" ry="2" />
<text  x="714.28" y="95.5" >schedule</text>
</g>
<g >
<title>fsnotify (14,000,000 samples, 0.14%)</title><rect x="1157.4" y="101" width="1.6" height="15.0" fill="rgb(209,11,50)" rx="2" ry="2" />
<text  x="1160.38" y="111.5" ></text>
</g>
<g >
<title>ktime_get_coarse_real_ts64 (5,000,000 samples, 0.05%)</title><rect x="1153.5" y="37" width="0.6" height="15.0" fill="rgb(214,30,39)" rx="2" ry="2" />
<text  x="1156.54" y="47.5" ></text>
</g>
<g >
<title>iov_iter_init (4,500,000 samples, 0.04%)</title><rect x="101.5" y="101" width="0.5" height="15.0" fill="rgb(209,121,38)" rx="2" ry="2" />
<text  x="104.50" y="111.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (152,500,000 samples, 1.52%)</title><rect x="693.3" y="69" width="18.0" height="15.0" fill="rgb(240,69,5)" rx="2" ry="2" />
<text  x="696.29" y="79.5" ></text>
</g>
<g >
<title>read (6,655,500,000 samples, 66.55%)</title><rect x="404.6" y="197" width="785.3" height="15.0" fill="rgb(212,106,22)" rx="2" ry="2" />
<text  x="407.62" y="207.5" >read</text>
</g>
<g >
<title>pipe_write (2,050,750,000 samples, 20.51%)</title><rect x="102.0" y="101" width="242.0" height="15.0" fill="rgb(223,120,29)" rx="2" ry="2" />
<text  x="105.03" y="111.5" >pipe_write</text>
</g>
<g >
<title>new_sync_read (4,828,250,000 samples, 48.28%)</title><rect x="584.4" y="117" width="569.7" height="15.0" fill="rgb(242,63,45)" rx="2" ry="2" />
<text  x="587.44" y="127.5" >new_sync_read</text>
</g>
<g >
<title>__fdget_pos (88,500,000 samples, 0.88%)</title><rect x="59.6" y="133" width="10.5" height="15.0" fill="rgb(254,115,33)" rx="2" ry="2" />
<text  x="62.64" y="143.5" ></text>
</g>
<g >
<title>__wake_up_sync_key (1,250,000 samples, 0.01%)</title><rect x="315.2" y="85" width="0.2" height="15.0" fill="rgb(216,114,8)" rx="2" ry="2" />
<text  x="318.21" y="95.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (1,555,250,000 samples, 15.55%)</title><rect x="131.7" y="85" width="183.5" height="15.0" fill="rgb(208,130,26)" rx="2" ry="2" />
<text  x="134.71" y="95.5" >__wake_up_common_lock</text>
</g>
<g >
<title>do_syscall_64 (5,397,000,000 samples, 53.97%)</title><rect x="546.3" y="165" width="636.8" height="15.0" fill="rgb(213,21,28)" rx="2" ry="2" />
<text  x="549.30" y="175.5" >do_syscall_64</text>
</g>
<g >
<title>ksys_read (5,141,250,000 samples, 51.41%)</title><rect x="552.4" y="149" width="606.6" height="15.0" fill="rgb(231,31,45)" rx="2" ry="2" />
<text  x="555.41" y="159.5" >ksys_read</text>
</g>
<g >
<title>_raw_spin_lock_irq (1,000,000 samples, 0.01%)</title><rect x="315.4" y="85" width="0.1" height="15.0" fill="rgb(244,4,12)" rx="2" ry="2" />
<text  x="318.36" y="95.5" ></text>
</g>
<g >
<title>mutex_unlock (44,500,000 samples, 0.44%)</title><rect x="678.0" y="85" width="5.3" height="15.0" fill="rgb(222,102,6)" rx="2" ry="2" />
<text  x="681.01" y="95.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (39,250,000 samples, 0.39%)</title><rect x="370.4" y="165" width="4.6" height="15.0" fill="rgb(207,120,26)" rx="2" ry="2" />
<text  x="373.40" y="175.5" ></text>
</g>
<g >
<title>__x64_sys_write (1,750,000 samples, 0.02%)</title><rect x="54.6" y="181" width="0.2" height="15.0" fill="rgb(232,167,46)" rx="2" ry="2" />
<text  x="57.63" y="191.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode_prepare (39,250,000 samples, 0.39%)</title><rect x="370.4" y="149" width="4.6" height="15.0" fill="rgb(216,59,28)" rx="2" ry="2" />
<text  x="373.40" y="159.5" ></text>
</g>
<g >
<title>fsnotify (32,500,000 samples, 0.32%)</title><rect x="580.6" y="117" width="3.8" height="15.0" fill="rgb(207,174,19)" rx="2" ry="2" />
<text  x="583.61" y="127.5" ></text>
</g>
<g >
<title>main (193,000,000 samples, 1.93%)</title><rect x="381.8" y="197" width="22.8" height="15.0" fill="rgb(235,152,7)" rx="2" ry="2" />
<text  x="384.85" y="207.5" >m..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,706,250,000 samples, 27.06%)</title><rect x="55.7" y="181" width="319.3" height="15.0" fill="rgb(212,171,41)" rx="2" ry="2" />
<text  x="58.72" y="191.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>copy_page_to_iter_iovec (192,000,000 samples, 1.92%)</title><rect x="646.2" y="85" width="22.6" height="15.0" fill="rgb(212,79,41)" rx="2" ry="2" />
<text  x="649.18" y="95.5" >c..</text>
</g>
<g >
<title>__fdget_pos (74,250,000 samples, 0.74%)</title><rect x="558.5" y="133" width="8.8" height="15.0" fill="rgb(245,83,7)" rx="2" ry="2" />
<text  x="561.54" y="143.5" ></text>
</g>
<g >
<title>touch_atime (75,000,000 samples, 0.75%)</title><rect x="1145.3" y="85" width="8.8" height="15.0" fill="rgb(213,165,7)" rx="2" ry="2" />
<text  x="1148.28" y="95.5" ></text>
</g>
<g >
<title>ftrace_trampoline (162,250,000 samples, 1.62%)</title><rect x="76.9" y="117" width="19.2" height="15.0" fill="rgb(248,124,3)" rx="2" ry="2" />
<text  x="79.93" y="127.5" ></text>
</g>
<g >
<title>__GI___libc_write (3,151,250,000 samples, 31.51%)</title><rect x="10.0" y="197" width="371.8" height="15.0" fill="rgb(208,108,30)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >__GI___libc_write</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (5,454,500,000 samples, 54.54%)</title><rect x="546.3" y="181" width="643.6" height="15.0" fill="rgb(211,110,41)" rx="2" ry="2" />
<text  x="549.30" y="191.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>iov_iter_init (3,250,000 samples, 0.03%)</title><rect x="597.1" y="101" width="0.4" height="15.0" fill="rgb(237,201,49)" rx="2" ry="2" />
<text  x="600.12" y="111.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_rax (1,750,000 samples, 0.02%)</title><rect x="54.6" y="165" width="0.2" height="15.0" fill="rgb(242,170,7)" rx="2" ry="2" />
<text  x="57.63" y="175.5" ></text>
</g>
<g >
<title>kill_fasync (3,250,000 samples, 0.03%)</title><rect x="339.5" y="85" width="0.3" height="15.0" fill="rgb(220,196,42)" rx="2" ry="2" />
<text  x="342.46" y="95.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode_prepare (53,750,000 samples, 0.54%)</title><rect x="1183.5" y="149" width="6.4" height="15.0" fill="rgb(249,10,49)" rx="2" ry="2" />
<text  x="1186.54" y="159.5" ></text>
</g>
<g >
<title>ksys_write (2,435,750,000 samples, 24.36%)</title><rect x="57.9" y="149" width="287.4" height="15.0" fill="rgb(223,102,19)" rx="2" ry="2" />
<text  x="60.93" y="159.5" >ksys_write</text>
</g>
<g >
<title>Filter_vfs_write_stub (167,000,000 samples, 1.67%)</title><rect x="34.7" y="181" width="19.8" height="15.0" fill="rgb(231,217,10)" rx="2" ry="2" />
<text  x="37.75" y="191.5" ></text>
</g>
<g >
<title>fsnotify (25,250,000 samples, 0.25%)</title><rect x="74.0" y="117" width="2.9" height="15.0" fill="rgb(225,208,47)" rx="2" ry="2" />
<text  x="76.95" y="127.5" ></text>
</g>
<g >
<title>__fget_light (66,750,000 samples, 0.67%)</title><rect x="559.4" y="117" width="7.9" height="15.0" fill="rgb(240,82,3)" rx="2" ry="2" />
<text  x="562.43" y="127.5" ></text>
</g>
<g >
<title>__x64_sys_read (1,000,000 samples, 0.01%)</title><rect x="546.0" y="181" width="0.2" height="15.0" fill="rgb(217,94,27)" rx="2" ry="2" />
<text  x="549.03" y="191.5" ></text>
</g>
<g >
<title>all (10,000,750,000 samples, 100%)</title><rect x="10.0" y="245" width="1180.0" height="15.0" fill="rgb(236,166,44)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>finish_task_switch (3,570,000,000 samples, 35.70%)</title><rect x="722.2" y="53" width="421.2" height="15.0" fill="rgb(237,107,14)" rx="2" ry="2" />
<text  x="725.17" y="63.5" >finish_task_switch</text>
</g>
<g >
<title>_raw_spin_lock_irqsave (48,250,000 samples, 0.48%)</title><rect x="687.6" y="69" width="5.7" height="15.0" fill="rgb(227,142,43)" rx="2" ry="2" />
<text  x="690.59" y="79.5" ></text>
</g>
<g >
<title>kill_fasync (1,000,000 samples, 0.01%)</title><rect x="672.9" y="85" width="0.1" height="15.0" fill="rgb(232,140,6)" rx="2" ry="2" />
<text  x="675.87" y="95.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (20,750,000 samples, 0.21%)</title><rect x="669.3" y="69" width="2.4" height="15.0" fill="rgb(228,71,42)" rx="2" ry="2" />
<text  x="672.28" y="79.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (212,500,000 samples, 2.12%)</title><rect x="345.3" y="149" width="25.1" height="15.0" fill="rgb(239,229,11)" rx="2" ry="2" />
<text  x="348.33" y="159.5" >s..</text>
</g>
<g >
<title>__x86_indirect_thunk_rax (1,250,000 samples, 0.01%)</title><rect x="546.2" y="181" width="0.1" height="15.0" fill="rgb(211,193,22)" rx="2" ry="2" />
<text  x="549.15" y="191.5" ></text>
</g>
<g >
<title>copy_page_from_iter (5,750,000 samples, 0.06%)</title><rect x="315.5" y="85" width="0.7" height="15.0" fill="rgb(230,32,20)" rx="2" ry="2" />
<text  x="318.48" y="95.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (17,000,000 samples, 0.17%)</title><rect x="133.2" y="69" width="2.0" height="15.0" fill="rgb(226,47,53)" rx="2" ry="2" />
<text  x="136.15" y="79.5" ></text>
</g>
<g >
<title>pipe_read (4,717,500,000 samples, 47.17%)</title><rect x="597.5" y="101" width="556.6" height="15.0" fill="rgb(245,97,32)" rx="2" ry="2" />
<text  x="600.51" y="111.5" >pipe_read</text>
</g>
<g >
<title>mutex_lock (23,250,000 samples, 0.23%)</title><rect x="339.8" y="85" width="2.8" height="15.0" fill="rgb(230,196,14)" rx="2" ry="2" />
<text  x="342.84" y="95.5" ></text>
</g>
<g >
<title>finish_wait (24,500,000 samples, 0.24%)</title><rect x="668.8" y="85" width="2.9" height="15.0" fill="rgb(217,226,37)" rx="2" ry="2" />
<text  x="671.83" y="95.5" ></text>
</g>
<g >
<title>file_update_time (30,750,000 samples, 0.31%)</title><rect x="335.8" y="85" width="3.7" height="15.0" fill="rgb(232,228,39)" rx="2" ry="2" />
<text  x="338.83" y="95.5" ></text>
</g>
<g >
<title>ftrace_ops_assist_func (133,000,000 samples, 1.33%)</title><rect x="80.4" y="101" width="15.7" height="15.0" fill="rgb(228,64,36)" rx="2" ry="2" />
<text  x="83.38" y="111.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_rax (7,500,000 samples, 0.07%)</title><rect x="54.8" y="181" width="0.9" height="15.0" fill="rgb(241,12,44)" rx="2" ry="2" />
<text  x="57.84" y="191.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (105,750,000 samples, 1.06%)</title><rect x="656.4" y="69" width="12.4" height="15.0" fill="rgb(242,135,11)" rx="2" ry="2" />
<text  x="659.36" y="79.5" ></text>
</g>
<g >
<title>vfs_write (2,332,750,000 samples, 23.33%)</title><rect x="70.1" y="133" width="275.2" height="15.0" fill="rgb(248,150,26)" rx="2" ry="2" />
<text  x="73.09" y="143.5" >vfs_write</text>
</g>
<g >
<title>__x86_indirect_thunk_rax (1,500,000 samples, 0.01%)</title><rect x="54.5" y="165" width="0.1" height="15.0" fill="rgb(219,214,15)" rx="2" ry="2" />
<text  x="57.45" y="175.5" ></text>
</g>
<g >
<title>copy_page_to_iter (7,500,000 samples, 0.07%)</title><rect x="645.3" y="85" width="0.9" height="15.0" fill="rgb(224,143,50)" rx="2" ry="2" />
<text  x="648.29" y="95.5" ></text>
</g>
<g >
<title>wake_up_idle_ht (16,000,000 samples, 0.16%)</title><rect x="1143.4" y="53" width="1.9" height="15.0" fill="rgb(231,150,10)" rx="2" ry="2" />
<text  x="1146.39" y="63.5" ></text>
</g>
<g >
<title>ftrace_trampoline (57,500,000 samples, 0.57%)</title><rect x="375.0" y="181" width="6.8" height="15.0" fill="rgb(225,214,32)" rx="2" ry="2" />
<text  x="378.04" y="191.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,667,000,000 samples, 26.67%)</title><rect x="55.7" y="165" width="314.7" height="15.0" fill="rgb(218,4,40)" rx="2" ry="2" />
<text  x="58.72" y="175.5" >do_syscall_64</text>
</g>
<g >
<title>mutex_lock (42,500,000 samples, 0.42%)</title><rect x="673.0" y="85" width="5.0" height="15.0" fill="rgb(226,81,51)" rx="2" ry="2" />
<text  x="675.99" y="95.5" ></text>
</g>
<g >
<title>RunFnMatchTest (1,500,000 samples, 0.01%)</title><rect x="54.5" y="181" width="0.1" height="15.0" fill="rgb(249,116,5)" rx="2" ry="2" />
<text  x="57.45" y="191.5" ></text>
</g>
<g >
<title>__fget_light (80,250,000 samples, 0.80%)</title><rect x="60.6" y="117" width="9.5" height="15.0" fill="rgb(240,26,8)" rx="2" ry="2" />
<text  x="63.62" y="127.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (57,500,000 samples, 0.57%)</title><rect x="1183.1" y="165" width="6.8" height="15.0" fill="rgb(245,42,3)" rx="2" ry="2" />
<text  x="1186.10" y="175.5" ></text>
</g>
<g >
<title>current_time (29,000,000 samples, 0.29%)</title><rect x="1150.7" y="53" width="3.4" height="15.0" fill="rgb(249,192,53)" rx="2" ry="2" />
<text  x="1153.71" y="63.5" ></text>
</g>
<g >
<title>RunFnMatchTest (58,750,000 samples, 0.59%)</title><rect x="89.1" y="85" width="7.0" height="15.0" fill="rgb(246,206,37)" rx="2" ry="2" />
<text  x="92.14" y="95.5" ></text>
</g>
<g >
<title>rw_verify_area (3,750,000 samples, 0.04%)</title><rect x="344.0" y="117" width="0.4" height="15.0" fill="rgb(221,133,5)" rx="2" ry="2" />
<text  x="347.00" y="127.5" ></text>
</g>
<g >
<title>Check_vfs_write (42,500,000 samples, 0.42%)</title><rect x="45.9" y="165" width="5.0" height="15.0" fill="rgb(244,40,21)" rx="2" ry="2" />
<text  x="48.93" y="175.5" ></text>
</g>
<g >
<title>atime_needs_update (56,250,000 samples, 0.56%)</title><rect x="1147.5" y="69" width="6.6" height="15.0" fill="rgb(246,82,32)" rx="2" ry="2" />
<text  x="1150.49" y="79.5" ></text>
</g>
<g >
<title>__x64_sys_read (5,250,000 samples, 0.05%)</title><rect x="551.8" y="149" width="0.6" height="15.0" fill="rgb(244,38,21)" rx="2" ry="2" />
<text  x="554.79" y="159.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irq (3,000,000 samples, 0.03%)</title><rect x="629.8" y="85" width="0.4" height="15.0" fill="rgb(208,162,8)" rx="2" ry="2" />
<text  x="632.84" y="95.5" ></text>
</g>
<g >
<title>new_sync_write (2,101,250,000 samples, 21.01%)</title><rect x="96.1" y="117" width="247.9" height="15.0" fill="rgb(252,204,15)" rx="2" ry="2" />
<text  x="99.07" y="127.5" >new_sync_write</text>
</g>
</g>
</svg>
