<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="294.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="277" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="277" > </text>
<g id="frames">
<g >
<title>ksys_read (5,499,250,000 samples, 54.99%)</title><rect x="510.0" y="149" width="648.9" height="15.0" fill="rgb(224,163,23)" rx="2" ry="2" />
<text  x="513.03" y="159.5" >ksys_read</text>
</g>
<g >
<title>init_wait_entry (4,250,000 samples, 0.04%)</title><rect x="635.6" y="85" width="0.5" height="15.0" fill="rgb(206,98,24)" rx="2" ry="2" />
<text  x="638.63" y="95.5" ></text>
</g>
<g >
<title>finish_wait (20,750,000 samples, 0.21%)</title><rect x="633.2" y="85" width="2.4" height="15.0" fill="rgb(226,96,50)" rx="2" ry="2" />
<text  x="636.18" y="95.5" ></text>
</g>
<g >
<title>kill_fasync (11,750,000 samples, 0.12%)</title><rect x="330.2" y="85" width="1.4" height="15.0" fill="rgb(244,182,36)" rx="2" ry="2" />
<text  x="333.25" y="95.5" ></text>
</g>
<g >
<title>__fget_light (54,000,000 samples, 0.54%)</title><rect x="518.0" y="117" width="6.4" height="15.0" fill="rgb(208,196,40)" rx="2" ry="2" />
<text  x="521.03" y="127.5" ></text>
</g>
<g >
<title>__fdget_pos (63,750,000 samples, 0.64%)</title><rect x="516.9" y="133" width="7.5" height="15.0" fill="rgb(239,174,18)" rx="2" ry="2" />
<text  x="519.88" y="143.5" ></text>
</g>
<g >
<title>security_file_permission (31,750,000 samples, 0.32%)</title><rect x="1155.1" y="117" width="3.8" height="15.0" fill="rgb(239,58,47)" rx="2" ry="2" />
<text  x="1158.13" y="127.5" ></text>
</g>
<g >
<title>current_time (17,750,000 samples, 0.18%)</title><rect x="1152.5" y="53" width="2.0" height="15.0" fill="rgb(243,74,39)" rx="2" ry="2" />
<text  x="1155.45" y="63.5" ></text>
</g>
<g >
<title>read (6,682,750,000 samples, 66.82%)</title><rect x="400.5" y="197" width="788.4" height="15.0" fill="rgb(209,124,38)" rx="2" ry="2" />
<text  x="403.45" y="207.5" >read</text>
</g>
<g >
<title>write@plt (1,000,000 samples, 0.01%)</title><rect x="1189.8" y="197" width="0.1" height="15.0" fill="rgb(216,4,48)" rx="2" ry="2" />
<text  x="1192.79" y="207.5" ></text>
</g>
<g >
<title>Check_vfs_write (125,750,000 samples, 1.26%)</title><rect x="59.3" y="165" width="14.9" height="15.0" fill="rgb(229,96,7)" rx="2" ry="2" />
<text  x="62.35" y="175.5" ></text>
</g>
<g >
<title>new_sync_write (2,099,750,000 samples, 21.00%)</title><rect x="97.6" y="117" width="247.8" height="15.0" fill="rgb(253,228,46)" rx="2" ry="2" />
<text  x="100.61" y="127.5" >new_sync_write</text>
</g>
<g >
<title>do_syscall_64 (5,794,750,000 samples, 57.94%)</title><rect x="501.6" y="165" width="683.7" height="15.0" fill="rgb(224,124,47)" rx="2" ry="2" />
<text  x="504.60" y="175.5" >do_syscall_64</text>
</g>
<g >
<title>copy_page_to_iter_iovec (164,000,000 samples, 1.64%)</title><rect x="613.8" y="85" width="19.4" height="15.0" fill="rgb(236,68,53)" rx="2" ry="2" />
<text  x="616.83" y="95.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (30,750,000 samples, 0.31%)</title><rect x="1185.3" y="165" width="3.6" height="15.0" fill="rgb(221,25,40)" rx="2" ry="2" />
<text  x="1188.31" y="175.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1,750,000 samples, 0.02%)</title><rect x="635.4" y="69" width="0.2" height="15.0" fill="rgb(232,185,31)" rx="2" ry="2" />
<text  x="638.43" y="79.5" ></text>
</g>
<g >
<title>main (175,250,000 samples, 1.75%)</title><rect x="379.8" y="197" width="20.7" height="15.0" fill="rgb(239,177,20)" rx="2" ry="2" />
<text  x="382.78" y="207.5" ></text>
</g>
<g >
<title>mutex_lock (68,000,000 samples, 0.68%)</title><rect x="331.6" y="85" width="8.1" height="15.0" fill="rgb(220,52,29)" rx="2" ry="2" />
<text  x="334.64" y="95.5" ></text>
</g>
<g >
<title>iov_iter_init (5,750,000 samples, 0.06%)</title><rect x="99.8" y="101" width="0.7" height="15.0" fill="rgb(241,26,50)" rx="2" ry="2" />
<text  x="102.79" y="111.5" ></text>
</g>
<g >
<title>__schedule (3,567,500,000 samples, 35.67%)</title><rect x="729.4" y="69" width="421.0" height="15.0" fill="rgb(229,24,47)" rx="2" ry="2" />
<text  x="732.43" y="79.5" >__schedule</text>
</g>
<g >
<title>mutex_unlock (48,250,000 samples, 0.48%)</title><rect x="339.7" y="85" width="5.7" height="15.0" fill="rgb(235,16,45)" rx="2" ry="2" />
<text  x="342.66" y="95.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (127,500,000 samples, 1.27%)</title><rect x="595.6" y="85" width="15.0" height="15.0" fill="rgb(230,76,51)" rx="2" ry="2" />
<text  x="598.58" y="95.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (34,750,000 samples, 0.35%)</title><rect x="315.4" y="69" width="4.1" height="15.0" fill="rgb(235,60,11)" rx="2" ry="2" />
<text  x="318.38" y="79.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (375,000,000 samples, 3.75%)</title><rect x="677.4" y="69" width="44.2" height="15.0" fill="rgb(205,129,52)" rx="2" ry="2" />
<text  x="680.37" y="79.5" >_raw..</text>
</g>
<g >
<title>rw_verify_area (5,000,000 samples, 0.05%)</title><rect x="1154.5" y="117" width="0.6" height="15.0" fill="rgb(234,229,43)" rx="2" ry="2" />
<text  x="1157.54" y="127.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (39,750,000 samples, 0.40%)</title><rect x="126.3" y="69" width="4.7" height="15.0" fill="rgb(205,72,18)" rx="2" ry="2" />
<text  x="129.31" y="79.5" ></text>
</g>
<g >
<title>kill_fasync (8,750,000 samples, 0.09%)</title><rect x="636.1" y="85" width="1.1" height="15.0" fill="rgb(214,205,37)" rx="2" ry="2" />
<text  x="639.13" y="95.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irq (3,500,000 samples, 0.03%)</title><rect x="306.9" y="85" width="0.4" height="15.0" fill="rgb(234,72,28)" rx="2" ry="2" />
<text  x="309.86" y="95.5" ></text>
</g>
<g >
<title>__fget_light (81,250,000 samples, 0.81%)</title><rect x="78.0" y="117" width="9.6" height="15.0" fill="rgb(237,120,20)" rx="2" ry="2" />
<text  x="80.99" y="127.5" ></text>
</g>
<g >
<title>schedule (3,633,750,000 samples, 36.33%)</title><rect x="721.6" y="85" width="428.8" height="15.0" fill="rgb(252,136,40)" rx="2" ry="2" />
<text  x="724.62" y="95.5" >schedule</text>
</g>
<g >
<title>__fdget_pos (87,500,000 samples, 0.87%)</title><rect x="77.3" y="133" width="10.3" height="15.0" fill="rgb(251,143,49)" rx="2" ry="2" />
<text  x="80.25" y="143.5" ></text>
</g>
<g >
<title>copy_page_to_iter (6,500,000 samples, 0.06%)</title><rect x="613.1" y="85" width="0.7" height="15.0" fill="rgb(244,80,43)" rx="2" ry="2" />
<text  x="616.07" y="95.5" ></text>
</g>
<g >
<title>ktime_get_coarse_real_ts64 (4,000,000 samples, 0.04%)</title><rect x="1154.1" y="37" width="0.4" height="15.0" fill="rgb(213,171,20)" rx="2" ry="2" />
<text  x="1157.07" y="47.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (86,250,000 samples, 0.86%)</title><rect x="623.0" y="69" width="10.2" height="15.0" fill="rgb(250,47,49)" rx="2" ry="2" />
<text  x="626.01" y="79.5" ></text>
</g>
<g >
<title>iov_iter_init (6,500,000 samples, 0.06%)</title><rect x="562.2" y="101" width="0.7" height="15.0" fill="rgb(254,76,14)" rx="2" ry="2" />
<text  x="565.16" y="111.5" ></text>
</g>
<g >
<title>copy_page_from_iter (12,500,000 samples, 0.12%)</title><rect x="307.3" y="85" width="1.4" height="15.0" fill="rgb(220,44,13)" rx="2" ry="2" />
<text  x="310.27" y="95.5" ></text>
</g>
<g >
<title>[unknown] (10,000,250,000 samples, 99.99%)</title><rect x="10.0" y="213" width="1179.9" height="15.0" fill="rgb(214,124,8)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >[unknown]</text>
</g>
<g >
<title>do_syscall_64 (2,532,500,000 samples, 25.32%)</title><rect x="75.4" y="165" width="298.8" height="15.0" fill="rgb(231,150,13)" rx="2" ry="2" />
<text  x="78.37" y="175.5" >do_syscall_64</text>
</g>
<g >
<title>__wake_up_sync_key (4,000,000 samples, 0.04%)</title><rect x="306.4" y="85" width="0.5" height="15.0" fill="rgb(250,90,32)" rx="2" ry="2" />
<text  x="309.39" y="95.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,540,750,000 samples, 25.40%)</title><rect x="75.4" y="181" width="299.7" height="15.0" fill="rgb(221,64,32)" rx="2" ry="2" />
<text  x="78.37" y="191.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>rw_verify_area (6,000,000 samples, 0.06%)</title><rect x="345.4" y="117" width="0.7" height="15.0" fill="rgb(212,214,10)" rx="2" ry="2" />
<text  x="348.35" y="127.5" ></text>
</g>
<g >
<title>ftrace_trampoline (35,250,000 samples, 0.35%)</title><rect x="93.4" y="117" width="4.2" height="15.0" fill="rgb(247,13,35)" rx="2" ry="2" />
<text  x="96.45" y="127.5" ></text>
</g>
<g >
<title>vfs_write (2,197,750,000 samples, 21.98%)</title><rect x="87.6" y="133" width="259.3" height="15.0" fill="rgb(249,87,10)" rx="2" ry="2" />
<text  x="90.58" y="143.5" >vfs_write</text>
</g>
<g >
<title>syscall_exit_to_user_mode_prepare (22,250,000 samples, 0.22%)</title><rect x="1186.3" y="149" width="2.6" height="15.0" fill="rgb(226,200,35)" rx="2" ry="2" />
<text  x="1189.31" y="159.5" ></text>
</g>
<g >
<title>vfs_read (5,377,500,000 samples, 53.77%)</title><rect x="524.4" y="133" width="634.5" height="15.0" fill="rgb(236,184,0)" rx="2" ry="2" />
<text  x="527.40" y="143.5" >vfs_read</text>
</g>
<g >
<title>mutex_lock (104,500,000 samples, 1.04%)</title><rect x="637.2" y="85" width="12.3" height="15.0" fill="rgb(226,109,40)" rx="2" ry="2" />
<text  x="640.17" y="95.5" ></text>
</g>
<g >
<title>wake_up_idle_ht (9,000,000 samples, 0.09%)</title><rect x="1149.3" y="53" width="1.1" height="15.0" fill="rgb(244,56,50)" rx="2" ry="2" />
<text  x="1152.29" y="63.5" ></text>
</g>
<g >
<title>fsnotify (20,250,000 samples, 0.20%)</title><rect x="1156.5" y="101" width="2.4" height="15.0" fill="rgb(220,160,54)" rx="2" ry="2" />
<text  x="1159.49" y="111.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode_prepare (7,750,000 samples, 0.08%)</title><rect x="374.2" y="149" width="0.9" height="15.0" fill="rgb(221,184,45)" rx="2" ry="2" />
<text  x="377.23" y="159.5" ></text>
</g>
<g >
<title>atime_needs_update (29,750,000 samples, 0.30%)</title><rect x="1151.0" y="69" width="3.5" height="15.0" fill="rgb(225,11,42)" rx="2" ry="2" />
<text  x="1154.03" y="79.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (231,250,000 samples, 2.31%)</title><rect x="346.9" y="149" width="27.3" height="15.0" fill="rgb(221,7,5)" rx="2" ry="2" />
<text  x="349.89" y="159.5" >s..</text>
</g>
<g >
<title>ktime_get_coarse_real_ts64 (3,750,000 samples, 0.04%)</title><rect x="329.8" y="53" width="0.4" height="15.0" fill="rgb(243,15,52)" rx="2" ry="2" />
<text  x="332.81" y="63.5" ></text>
</g>
<g >
<title>security_file_permission (7,000,000 samples, 0.07%)</title><rect x="346.1" y="117" width="0.8" height="15.0" fill="rgb(238,110,49)" rx="2" ry="2" />
<text  x="349.06" y="127.5" ></text>
</g>
<g >
<title>read@plt (7,250,000 samples, 0.07%)</title><rect x="1188.9" y="197" width="0.9" height="15.0" fill="rgb(224,75,25)" rx="2" ry="2" />
<text  x="1191.94" y="207.5" ></text>
</g>
<g >
<title>new_sync_read (5,112,000,000 samples, 51.11%)</title><rect x="551.4" y="117" width="603.1" height="15.0" fill="rgb(252,213,33)" rx="2" ry="2" />
<text  x="554.39" y="127.5" >new_sync_read</text>
</g>
<g >
<title>fsnotify (12,750,000 samples, 0.13%)</title><rect x="91.9" y="117" width="1.5" height="15.0" fill="rgb(207,151,27)" rx="2" ry="2" />
<text  x="94.94" y="127.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (62,250,000 samples, 0.62%)</title><rect x="319.5" y="69" width="7.3" height="15.0" fill="rgb(213,202,54)" rx="2" ry="2" />
<text  x="322.48" y="79.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (5,825,500,000 samples, 58.25%)</title><rect x="501.6" y="181" width="687.3" height="15.0" fill="rgb(230,53,52)" rx="2" ry="2" />
<text  x="504.60" y="191.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>copy_page_from_iter_iovec (153,250,000 samples, 1.53%)</title><rect x="308.7" y="85" width="18.1" height="15.0" fill="rgb(232,174,11)" rx="2" ry="2" />
<text  x="311.75" y="95.5" ></text>
</g>
<g >
<title>pipe_write (2,075,500,000 samples, 20.75%)</title><rect x="100.5" y="101" width="244.9" height="15.0" fill="rgb(235,85,26)" rx="2" ry="2" />
<text  x="103.47" y="111.5" >pipe_write</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,486,500,000 samples, 14.86%)</title><rect x="131.0" y="69" width="175.4" height="15.0" fill="rgb(225,85,2)" rx="2" ry="2" />
<text  x="134.00" y="79.5" >_raw_spin_unlock_irqre..</text>
</g>
<g >
<title>__x64_sys_write (1,250,000 samples, 0.01%)</title><rect x="76.0" y="149" width="0.2" height="15.0" fill="rgb(209,139,29)" rx="2" ry="2" />
<text  x="79.04" y="159.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (56,500,000 samples, 0.56%)</title><rect x="670.7" y="69" width="6.7" height="15.0" fill="rgb(232,207,2)" rx="2" ry="2" />
<text  x="673.70" y="79.5" ></text>
</g>
<g >
<title>ftrace_trampoline (10,000,000 samples, 0.10%)</title><rect x="74.2" y="165" width="1.2" height="15.0" fill="rgb(210,7,31)" rx="2" ry="2" />
<text  x="77.19" y="175.5" ></text>
</g>
<g >
<title>pipe_read (5,014,250,000 samples, 50.14%)</title><rect x="562.9" y="101" width="591.6" height="15.0" fill="rgb(245,115,23)" rx="2" ry="2" />
<text  x="565.92" y="111.5" >pipe_read</text>
</g>
<g >
<title>ftrace_trampoline (39,000,000 samples, 0.39%)</title><rect x="375.1" y="181" width="4.6" height="15.0" fill="rgb(231,39,22)" rx="2" ry="2" />
<text  x="378.14" y="191.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (8,250,000 samples, 0.08%)</title><rect x="374.2" y="165" width="0.9" height="15.0" fill="rgb(242,53,52)" rx="2" ry="2" />
<text  x="377.17" y="175.5" ></text>
</g>
<g >
<title>current_time (16,250,000 samples, 0.16%)</title><rect x="328.3" y="69" width="1.9" height="15.0" fill="rgb(218,109,37)" rx="2" ry="2" />
<text  x="331.33" y="79.5" ></text>
</g>
<g >
<title>RunFnMatchTest (9,750,000 samples, 0.10%)</title><rect x="96.5" y="85" width="1.1" height="15.0" fill="rgb(226,89,51)" rx="2" ry="2" />
<text  x="99.46" y="95.5" ></text>
</g>
<g >
<title>ksys_write (2,294,250,000 samples, 22.94%)</title><rect x="76.2" y="149" width="270.7" height="15.0" fill="rgb(218,17,27)" rx="2" ry="2" />
<text  x="79.19" y="159.5" >ksys_write</text>
</g>
<g >
<title>fsnotify (32,500,000 samples, 0.32%)</title><rect x="547.6" y="117" width="3.8" height="15.0" fill="rgb(245,180,47)" rx="2" ry="2" />
<text  x="550.55" y="127.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (30,500,000 samples, 0.30%)</title><rect x="619.4" y="69" width="3.6" height="15.0" fill="rgb(222,167,51)" rx="2" ry="2" />
<text  x="622.41" y="79.5" ></text>
</g>
<g >
<title>Filter_vfs_write_stub (276,750,000 samples, 2.77%)</title><rect x="42.7" y="181" width="32.7" height="15.0" fill="rgb(238,50,27)" rx="2" ry="2" />
<text  x="45.71" y="191.5" >Fi..</text>
</g>
<g >
<title>__x64_sys_read (1,500,000 samples, 0.01%)</title><rect x="509.9" y="149" width="0.1" height="15.0" fill="rgb(221,220,34)" rx="2" ry="2" />
<text  x="512.86" y="159.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irq (3,000,000 samples, 0.03%)</title><rect x="595.2" y="85" width="0.4" height="15.0" fill="rgb(247,214,31)" rx="2" ry="2" />
<text  x="598.22" y="95.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (224,000,000 samples, 2.24%)</title><rect x="1158.9" y="149" width="26.4" height="15.0" fill="rgb(217,0,16)" rx="2" ry="2" />
<text  x="1161.88" y="159.5" >s..</text>
</g>
<g >
<title>touch_atime (35,500,000 samples, 0.35%)</title><rect x="1150.4" y="85" width="4.1" height="15.0" fill="rgb(208,108,49)" rx="2" ry="2" />
<text  x="1153.36" y="95.5" ></text>
</g>
<g >
<title>finish_task_switch (3,534,250,000 samples, 35.34%)</title><rect x="732.3" y="53" width="417.0" height="15.0" fill="rgb(218,168,10)" rx="2" ry="2" />
<text  x="735.29" y="63.5" >finish_task_switch</text>
</g>
<g >
<title>anon_pipe_buf_release (20,750,000 samples, 0.21%)</title><rect x="610.6" y="85" width="2.5" height="15.0" fill="rgb(234,23,42)" rx="2" ry="2" />
<text  x="613.62" y="95.5" ></text>
</g>
<g >
<title>__GI___libc_write (3,133,750,000 samples, 31.33%)</title><rect x="10.0" y="197" width="369.7" height="15.0" fill="rgb(238,64,0)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >__GI___libc_write</text>
</g>
<g >
<title>mutex_unlock (108,750,000 samples, 1.09%)</title><rect x="649.5" y="85" width="12.8" height="15.0" fill="rgb(217,214,50)" rx="2" ry="2" />
<text  x="652.50" y="95.5" ></text>
</g>
<g >
<title>prepare_to_wait_event (502,500,000 samples, 5.02%)</title><rect x="662.3" y="85" width="59.3" height="15.0" fill="rgb(228,106,30)" rx="2" ry="2" />
<text  x="665.33" y="95.5" >prepar..</text>
</g>
<g >
<title>file_update_time (29,000,000 samples, 0.29%)</title><rect x="326.8" y="85" width="3.4" height="15.0" fill="rgb(248,66,32)" rx="2" ry="2" />
<text  x="329.83" y="95.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (1,558,500,000 samples, 15.58%)</title><rect x="122.5" y="85" width="183.9" height="15.0" fill="rgb(236,97,9)" rx="2" ry="2" />
<text  x="125.50" y="95.5" >__wake_up_common_lock</text>
</g>
<g >
<title>all (10,001,000,000 samples, 100%)</title><rect x="10.0" y="245" width="1180.0" height="15.0" fill="rgb(242,79,52)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>context1 (10,000,250,000 samples, 99.99%)</title><rect x="10.0" y="229" width="1179.9" height="15.0" fill="rgb(250,152,53)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >context1</text>
</g>
<g >
<title>ftrace_ops_assist_func (23,000,000 samples, 0.23%)</title><rect x="94.9" y="101" width="2.7" height="15.0" fill="rgb(230,20,6)" rx="2" ry="2" />
<text  x="97.89" y="111.5" ></text>
</g>
</g>
</svg>
