<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="294.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="277" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="277" > </text>
<g id="frames">
<g >
<title>new_sync_write (2,641,500,000 samples, 26.41%)</title><rect x="266.3" y="117" width="311.7" height="15.0" fill="rgb(234,208,19)" rx="2" ry="2" />
<text  x="269.30" y="127.5" >new_sync_write</text>
</g>
<g >
<title>_raw_spin_lock_irqsave (147,250,000 samples, 1.47%)</title><rect x="360.3" y="69" width="17.4" height="15.0" fill="rgb(250,128,29)" rx="2" ry="2" />
<text  x="363.28" y="79.5" ></text>
</g>
<g >
<title>rw_verify_area (18,000,000 samples, 0.18%)</title><rect x="1079.4" y="117" width="2.1" height="15.0" fill="rgb(227,150,9)" rx="2" ry="2" />
<text  x="1082.42" y="127.5" ></text>
</g>
<g >
<title>[unknown] (10,000,000,000 samples, 99.99%)</title><rect x="10.0" y="213" width="1179.9" height="15.0" fill="rgb(214,105,20)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >[unknown]</text>
</g>
<g >
<title>Check_vfs_write (433,250,000 samples, 4.33%)</title><rect x="149.3" y="165" width="51.1" height="15.0" fill="rgb(208,54,29)" rx="2" ry="2" />
<text  x="152.31" y="175.5" >Check..</text>
</g>
<g >
<title>mutex_lock (218,500,000 samples, 2.18%)</title><rect x="532.3" y="85" width="25.8" height="15.0" fill="rgb(211,224,9)" rx="2" ry="2" />
<text  x="535.30" y="95.5" >m..</text>
</g>
<g >
<title>__x64_sys_read (7,500,000 samples, 0.07%)</title><rect x="821.6" y="149" width="0.9" height="15.0" fill="rgb(230,170,40)" rx="2" ry="2" />
<text  x="824.61" y="159.5" ></text>
</g>
<g >
<title>Filter_vfs_write_stub (1,000,000 samples, 0.01%)</title><rect x="203.3" y="165" width="0.1" height="15.0" fill="rgb(230,40,24)" rx="2" ry="2" />
<text  x="206.32" y="175.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (537,250,000 samples, 5.37%)</title><rect x="954.8" y="69" width="63.4" height="15.0" fill="rgb(216,12,50)" rx="2" ry="2" />
<text  x="957.76" y="79.5" >copy_u..</text>
</g>
<g >
<title>file_update_time (94,250,000 samples, 0.94%)</title><rect x="517.6" y="85" width="11.1" height="15.0" fill="rgb(207,66,10)" rx="2" ry="2" />
<text  x="520.56" y="95.5" ></text>
</g>
<g >
<title>fsnotify (51,000,000 samples, 0.51%)</title><rect x="247.4" y="117" width="6.0" height="15.0" fill="rgb(231,119,33)" rx="2" ry="2" />
<text  x="250.36" y="127.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (726,000,000 samples, 7.26%)</title><rect x="1094.5" y="149" width="85.7" height="15.0" fill="rgb(235,72,41)" rx="2" ry="2" />
<text  x="1097.52" y="159.5" >syscall_en..</text>
</g>
<g >
<title>do_syscall_64 (3,054,250,000 samples, 30.54%)</title><rect x="819.8" y="165" width="360.4" height="15.0" fill="rgb(250,195,29)" rx="2" ry="2" />
<text  x="822.81" y="175.5" >do_syscall_64</text>
</g>
<g >
<title>iov_iter_init (18,250,000 samples, 0.18%)</title><rect x="273.1" y="101" width="2.2" height="15.0" fill="rgb(219,202,34)" rx="2" ry="2" />
<text  x="276.14" y="111.5" ></text>
</g>
<g >
<title>rw_verify_area (16,750,000 samples, 0.17%)</title><rect x="578.0" y="117" width="1.9" height="15.0" fill="rgb(236,167,29)" rx="2" ry="2" />
<text  x="580.97" y="127.5" ></text>
</g>
<g >
<title>copy_page_from_iter (36,250,000 samples, 0.36%)</title><rect x="428.5" y="85" width="4.3" height="15.0" fill="rgb(245,174,10)" rx="2" ry="2" />
<text  x="431.47" y="95.5" ></text>
</g>
<g >
<title>mutex_unlock (168,500,000 samples, 1.68%)</title><rect x="558.1" y="85" width="19.9" height="15.0" fill="rgb(217,53,16)" rx="2" ry="2" />
<text  x="561.08" y="95.5" ></text>
</g>
<g >
<title>ftrace_trampoline (109,500,000 samples, 1.09%)</title><rect x="253.4" y="117" width="12.9" height="15.0" fill="rgb(250,221,29)" rx="2" ry="2" />
<text  x="256.38" y="127.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (399,500,000 samples, 3.99%)</title><rect x="377.7" y="69" width="47.1" height="15.0" fill="rgb(208,102,42)" rx="2" ry="2" />
<text  x="380.65" y="79.5" >_raw..</text>
</g>
<g >
<title>ktime_get_coarse_real_ts64 (16,250,000 samples, 0.16%)</title><rect x="526.8" y="53" width="1.9" height="15.0" fill="rgb(207,121,46)" rx="2" ry="2" />
<text  x="529.76" y="63.5" ></text>
</g>
<g >
<title>ksys_read (2,305,500,000 samples, 23.05%)</title><rect x="822.5" y="149" width="272.0" height="15.0" fill="rgb(226,78,36)" rx="2" ry="2" />
<text  x="825.50" y="159.5" >ksys_read</text>
</g>
<g >
<title>mutex_lock (238,250,000 samples, 2.38%)</title><rect x="1019.9" y="85" width="28.1" height="15.0" fill="rgb(216,53,52)" rx="2" ry="2" />
<text  x="1022.92" y="95.5" >m..</text>
</g>
<g >
<title>mutex_unlock (163,750,000 samples, 1.64%)</title><rect x="1048.0" y="85" width="19.4" height="15.0" fill="rgb(230,112,34)" rx="2" ry="2" />
<text  x="1051.03" y="95.5" ></text>
</g>
<g >
<title>ksys_write (3,180,250,000 samples, 31.80%)</title><rect x="207.0" y="149" width="375.2" height="15.0" fill="rgb(237,19,6)" rx="2" ry="2" />
<text  x="209.98" y="159.5" >ksys_write</text>
</g>
<g >
<title>ftrace_trampoline (1,000,000 samples, 0.01%)</title><rect x="203.3" y="149" width="0.1" height="15.0" fill="rgb(234,74,42)" rx="2" ry="2" />
<text  x="206.32" y="159.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irq (14,000,000 samples, 0.14%)</title><rect x="426.8" y="85" width="1.7" height="15.0" fill="rgb(230,65,19)" rx="2" ry="2" />
<text  x="429.82" y="95.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (645,250,000 samples, 6.45%)</title><rect x="348.7" y="85" width="76.1" height="15.0" fill="rgb(208,126,14)" rx="2" ry="2" />
<text  x="351.66" y="95.5" >__wake_u..</text>
</g>
<g >
<title>ftrace_ops_assist_func (81,000,000 samples, 0.81%)</title><rect x="256.7" y="101" width="9.6" height="15.0" fill="rgb(220,90,26)" rx="2" ry="2" />
<text  x="259.74" y="111.5" ></text>
</g>
<g >
<title>security_file_permission (110,000,000 samples, 1.10%)</title><rect x="1081.5" y="117" width="13.0" height="15.0" fill="rgb(240,195,52)" rx="2" ry="2" />
<text  x="1084.54" y="127.5" ></text>
</g>
<g >
<title>Filter_vfs_write_stub (822,500,000 samples, 8.22%)</title><rect x="106.3" y="181" width="97.0" height="15.0" fill="rgb(228,58,30)" rx="2" ry="2" />
<text  x="109.28" y="191.5" >Filter_vfs_..</text>
</g>
<g >
<title>__fget_light (205,000,000 samples, 2.05%)</title><rect x="211.7" y="117" width="24.2" height="15.0" fill="rgb(254,210,53)" rx="2" ry="2" />
<text  x="214.70" y="127.5" >_..</text>
</g>
<g >
<title>pipe (10,000,500,000 samples, 100.00%)</title><rect x="10.0" y="229" width="1179.9" height="15.0" fill="rgb(247,131,13)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >pipe</text>
</g>
<g >
<title>copy_page_to_iter (32,000,000 samples, 0.32%)</title><rect x="927.9" y="85" width="3.7" height="15.0" fill="rgb(212,175,22)" rx="2" ry="2" />
<text  x="930.86" y="95.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3,077,500,000 samples, 30.77%)</title><rect x="819.8" y="181" width="363.1" height="15.0" fill="rgb(253,81,32)" rx="2" ry="2" />
<text  x="822.81" y="191.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>kill_fasync (30,750,000 samples, 0.31%)</title><rect x="528.7" y="85" width="3.6" height="15.0" fill="rgb(217,46,17)" rx="2" ry="2" />
<text  x="531.68" y="95.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (23,250,000 samples, 0.23%)</title><rect x="1180.2" y="165" width="2.7" height="15.0" fill="rgb(235,13,5)" rx="2" ry="2" />
<text  x="1183.18" y="175.5" ></text>
</g>
<g >
<title>new_sync_read (1,789,250,000 samples, 17.89%)</title><rect x="868.3" y="117" width="211.1" height="15.0" fill="rgb(250,215,20)" rx="2" ry="2" />
<text  x="871.31" y="127.5" >new_sync_read</text>
</g>
<g >
<title>_raw_spin_lock_irq (5,250,000 samples, 0.05%)</title><rect x="919.1" y="85" width="0.6" height="15.0" fill="rgb(232,227,17)" rx="2" ry="2" />
<text  x="922.10" y="95.5" ></text>
</g>
<g >
<title>security_file_permission (19,250,000 samples, 0.19%)</title><rect x="579.9" y="117" width="2.3" height="15.0" fill="rgb(212,168,2)" rx="2" ry="2" />
<text  x="582.94" y="127.5" ></text>
</g>
<g >
<title>__fdget_pos (221,500,000 samples, 2.21%)</title><rect x="209.8" y="133" width="26.1" height="15.0" fill="rgb(231,94,31)" rx="2" ry="2" />
<text  x="212.75" y="143.5" >_..</text>
</g>
<g >
<title>copy_user_enhanced_fast_string (526,000,000 samples, 5.26%)</title><rect x="455.5" y="69" width="62.1" height="15.0" fill="rgb(210,31,11)" rx="2" ry="2" />
<text  x="458.49" y="79.5" >copy_u..</text>
</g>
<g >
<title>touch_atime (102,250,000 samples, 1.02%)</title><rect x="1067.4" y="85" width="12.0" height="15.0" fill="rgb(219,55,45)" rx="2" ry="2" />
<text  x="1070.35" y="95.5" ></text>
</g>
<g >
<title>copy_page_to_iter_iovec (733,250,000 samples, 7.33%)</title><rect x="931.6" y="85" width="86.6" height="15.0" fill="rgb(253,75,38)" rx="2" ry="2" />
<text  x="934.64" y="95.5" >copy_page_..</text>
</g>
<g >
<title>atime_needs_update (82,500,000 samples, 0.82%)</title><rect x="1069.7" y="69" width="9.7" height="15.0" fill="rgb(247,111,18)" rx="2" ry="2" />
<text  x="1072.68" y="79.5" ></text>
</g>
<g >
<title>current_time (56,750,000 samples, 0.57%)</title><rect x="522.0" y="69" width="6.7" height="15.0" fill="rgb(239,128,24)" rx="2" ry="2" />
<text  x="524.98" y="79.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (758,000,000 samples, 7.58%)</title><rect x="582.2" y="149" width="89.4" height="15.0" fill="rgb(229,192,32)" rx="2" ry="2" />
<text  x="585.21" y="159.5" >syscall_en..</text>
</g>
<g >
<title>write@plt (34,500,000 samples, 0.34%)</title><rect x="1185.8" y="197" width="4.1" height="15.0" fill="rgb(222,25,3)" rx="2" ry="2" />
<text  x="1188.81" y="207.5" ></text>
</g>
<g >
<title>all (10,001,000,000 samples, 100%)</title><rect x="10.0" y="245" width="1180.0" height="15.0" fill="rgb(245,228,10)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,000,000 samples, 0.01%)</title><rect x="203.3" y="181" width="0.1" height="15.0" fill="rgb(224,3,8)" rx="2" ry="2" />
<text  x="206.32" y="191.5" ></text>
</g>
<g >
<title>pipe_read (1,699,750,000 samples, 17.00%)</title><rect x="878.9" y="101" width="200.5" height="15.0" fill="rgb(228,137,8)" rx="2" ry="2" />
<text  x="881.87" y="111.5" >pipe_read</text>
</g>
<g >
<title>syscall_exit_to_user_mode (17,250,000 samples, 0.17%)</title><rect x="671.6" y="165" width="2.1" height="15.0" fill="rgb(221,202,33)" rx="2" ry="2" />
<text  x="674.65" y="175.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode_prepare (17,000,000 samples, 0.17%)</title><rect x="671.7" y="149" width="2.0" height="15.0" fill="rgb(253,207,26)" rx="2" ry="2" />
<text  x="674.68" y="159.5" ></text>
</g>
<g >
<title>fsnotify (45,000,000 samples, 0.45%)</title><rect x="863.0" y="117" width="5.3" height="15.0" fill="rgb(238,183,17)" rx="2" ry="2" />
<text  x="866.00" y="127.5" ></text>
</g>
<g >
<title>anon_pipe_buf_release (69,000,000 samples, 0.69%)</title><rect x="919.7" y="85" width="8.2" height="15.0" fill="rgb(237,16,54)" rx="2" ry="2" />
<text  x="922.72" y="95.5" ></text>
</g>
<g >
<title>fsnotify (64,500,000 samples, 0.64%)</title><rect x="1086.9" y="101" width="7.6" height="15.0" fill="rgb(217,110,23)" rx="2" ry="2" />
<text  x="1089.91" y="111.5" ></text>
</g>
<g >
<title>vfs_write (2,935,250,000 samples, 29.35%)</title><rect x="235.9" y="133" width="346.3" height="15.0" fill="rgb(208,182,18)" rx="2" ry="2" />
<text  x="238.89" y="143.5" >vfs_write</text>
</g>
<g >
<title>ktime_get_coarse_real_ts64 (12,750,000 samples, 0.13%)</title><rect x="1077.9" y="37" width="1.5" height="15.0" fill="rgb(234,122,38)" rx="2" ry="2" />
<text  x="1080.91" y="47.5" ></text>
</g>
<g >
<title>current_time (49,250,000 samples, 0.49%)</title><rect x="1073.6" y="53" width="5.8" height="15.0" fill="rgb(249,4,39)" rx="2" ry="2" />
<text  x="1076.60" y="63.5" ></text>
</g>
<g >
<title>ftrace_trampoline (104,750,000 samples, 1.05%)</title><rect x="673.7" y="181" width="12.3" height="15.0" fill="rgb(216,191,13)" rx="2" ry="2" />
<text  x="676.68" y="191.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3,985,500,000 samples, 39.85%)</title><rect x="203.4" y="181" width="470.3" height="15.0" fill="rgb(210,80,35)" rx="2" ry="2" />
<text  x="206.44" y="191.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>__x64_sys_write (8,000,000 samples, 0.08%)</title><rect x="206.0" y="149" width="1.0" height="15.0" fill="rgb(231,219,37)" rx="2" ry="2" />
<text  x="209.04" y="159.5" ></text>
</g>
<g >
<title>__fdget_pos (212,500,000 samples, 2.12%)</title><rect x="827.0" y="133" width="25.0" height="15.0" fill="rgb(225,27,21)" rx="2" ry="2" />
<text  x="829.95" y="143.5" >_..</text>
</g>
<g >
<title>vfs_read (2,055,250,000 samples, 20.55%)</title><rect x="852.0" y="133" width="242.5" height="15.0" fill="rgb(249,22,24)" rx="2" ry="2" />
<text  x="855.02" y="143.5" >vfs_read</text>
</g>
<g >
<title>__wake_up_sync_key (17,250,000 samples, 0.17%)</title><rect x="424.8" y="85" width="2.0" height="15.0" fill="rgb(220,123,31)" rx="2" ry="2" />
<text  x="427.79" y="95.5" ></text>
</g>
<g >
<title>RunFnMatchTest (25,750,000 samples, 0.26%)</title><rect x="263.3" y="85" width="3.0" height="15.0" fill="rgb(219,62,33)" rx="2" ry="2" />
<text  x="266.26" y="95.5" ></text>
</g>
<g >
<title>read (3,879,750,000 samples, 38.79%)</title><rect x="725.2" y="197" width="457.7" height="15.0" fill="rgb(238,225,10)" rx="2" ry="2" />
<text  x="728.16" y="207.5" >read</text>
</g>
<g >
<title>syscall_exit_to_user_mode_prepare (15,750,000 samples, 0.16%)</title><rect x="1181.1" y="149" width="1.8" height="15.0" fill="rgb(212,56,24)" rx="2" ry="2" />
<text  x="1184.06" y="159.5" ></text>
</g>
<g >
<title>read@plt (24,500,000 samples, 0.24%)</title><rect x="1182.9" y="197" width="2.9" height="15.0" fill="rgb(241,199,12)" rx="2" ry="2" />
<text  x="1185.92" y="207.5" ></text>
</g>
<g >
<title>kill_fasync (15,000,000 samples, 0.15%)</title><rect x="1018.2" y="85" width="1.7" height="15.0" fill="rgb(230,198,27)" rx="2" ry="2" />
<text  x="1021.15" y="95.5" ></text>
</g>
<g >
<title>ftrace_trampoline (24,500,000 samples, 0.24%)</title><rect x="200.4" y="165" width="2.9" height="15.0" fill="rgb(241,216,27)" rx="2" ry="2" />
<text  x="203.43" y="175.5" ></text>
</g>
<g >
<title>__fget_light (185,250,000 samples, 1.85%)</title><rect x="830.2" y="117" width="21.8" height="15.0" fill="rgb(238,42,34)" rx="2" ry="2" />
<text  x="833.17" y="127.5" >_..</text>
</g>
<g >
<title>main (331,250,000 samples, 3.31%)</title><rect x="686.1" y="197" width="39.1" height="15.0" fill="rgb(228,62,46)" rx="2" ry="2" />
<text  x="689.07" y="207.5" >main</text>
</g>
<g >
<title>pipe_write (2,565,250,000 samples, 25.65%)</title><rect x="275.3" y="101" width="302.7" height="15.0" fill="rgb(231,193,45)" rx="2" ry="2" />
<text  x="278.30" y="111.5" >pipe_write</text>
</g>
<g >
<title>iov_iter_init (15,250,000 samples, 0.15%)</title><rect x="877.1" y="101" width="1.8" height="15.0" fill="rgb(246,210,50)" rx="2" ry="2" />
<text  x="880.07" y="111.5" ></text>
</g>
<g >
<title>do_syscall_64 (3,968,250,000 samples, 39.68%)</title><rect x="203.4" y="165" width="468.2" height="15.0" fill="rgb(221,209,44)" rx="2" ry="2" />
<text  x="206.44" y="175.5" >do_syscall_64</text>
</g>
<g >
<title>copy_page_from_iter_iovec (718,750,000 samples, 7.19%)</title><rect x="432.8" y="85" width="84.8" height="15.0" fill="rgb(209,12,17)" rx="2" ry="2" />
<text  x="435.75" y="95.5" >copy_page..</text>
</g>
<g >
<title>__GI___libc_write (5,730,000,000 samples, 57.29%)</title><rect x="10.0" y="197" width="676.1" height="15.0" fill="rgb(210,57,41)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >__GI___libc_write</text>
</g>
</g>
</svg>
